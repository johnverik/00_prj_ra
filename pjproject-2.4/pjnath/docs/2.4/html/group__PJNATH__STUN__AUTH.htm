<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>STUN Authentication (2.4)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>


<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">STUN Authentication</div>  </div>
<div class="ingroups"><a class="el" href="group__PJNATH__STUN__BASE.htm">Base STUN objects</a></div></div><!--header-->
<div class="contents">

<p>STUN authentication helper.  
</p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#ga2b5c95ba6bb32358c11dc2c613f641b0">pj_stun_auth_type</a> { <br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#gga2b5c95ba6bb32358c11dc2c613f641b0a5c788ea84fbb14332e35afb2ed839cf9">PJ_STUN_AUTH_NONE</a> =  0, 
<br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#gga2b5c95ba6bb32358c11dc2c613f641b0a7a9828b8632e3d4ae18ab9da54d1c234">PJ_STUN_AUTH_SHORT_TERM</a> =  1, 
<br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#gga2b5c95ba6bb32358c11dc2c613f641b0af956886ba37dd8c63e382a0718aa5247">PJ_STUN_AUTH_LONG_TERM</a> =  2
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#ga1cb1133fc704a99147e9e5f0ddf35aa0">pj_stun_auth_cred_type</a> { <br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#gga1cb1133fc704a99147e9e5f0ddf35aa0aa9a8a104d5f97636778fce3e205b3cb6">PJ_STUN_AUTH_CRED_STATIC</a>, 
<br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#gga1cb1133fc704a99147e9e5f0ddf35aa0af749ce642bcbd44369d6f43af7f88315">PJ_STUN_AUTH_CRED_DYNAMIC</a>
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#gab91bef4d8bf966ccd2a48da636206c28">pj_stun_passwd_type</a> { <br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#ggab91bef4d8bf966ccd2a48da636206c28af960b65c6b553f433308ab46fe78bc33">PJ_STUN_PASSWD_PLAIN</a> =  0, 
<br/>
&#160;&#160;<a class="el" href="group__PJNATH__STUN__AUTH.htm#ggab91bef4d8bf966ccd2a48da636206c28abc51efc77eb3b3e2a558b30cdd9e90ae">PJ_STUN_PASSWD_HASHED</a> =  1
<br/>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#gacdda3c9cb9a257152228b0e5e4737c8e">pj_stun_auth_cred_dup</a> (pj_pool_t *pool, <a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> *dst, const <a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#gae6627e23dea196ac0c3ff5e4135b89ae">pj_stun_req_cred_info_dup</a> (pj_pool_t *pool, <a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a> *dst, const <a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#ga9438d242e00241587d3389155f0db8a4">pj_stun_create_key</a> (pj_pool_t *pool, pj_str_t *key, const pj_str_t *realm, const pj_str_t *username, <a class="el" href="group__PJNATH__STUN__AUTH.htm#gab91bef4d8bf966ccd2a48da636206c28">pj_stun_passwd_type</a> data_type, const pj_str_t *data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#gab8d300fc619ce7063915270f1c33f37e">pj_stun_authenticate_request</a> (const pj_uint8_t *pkt, unsigned pkt_len, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *msg, <a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> *cred, pj_pool_t *pool, <a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a> *info, <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> **p_response)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_bool_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#gaee822579112dcbb7d9057aac7b56f3d2">pj_stun_auth_valid_for_msg</a> (const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *msg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__AUTH.htm#ga11c17969134bdb4d2a3aa77e3d1f6e6b">pj_stun_authenticate_response</a> (const pj_uint8_t *pkt, unsigned pkt_len, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *msg, const pj_str_t *key)</td></tr>
</table>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="ga1cb1133fc704a99147e9e5f0ddf35aa0"></a><!-- doxytag: member="stun_auth.h::pj_stun_auth_cred_type" ref="ga1cb1133fc704a99147e9e5f0ddf35aa0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJNATH__STUN__AUTH.htm#ga1cb1133fc704a99147e9e5f0ddf35aa0">pj_stun_auth_cred_type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Type of authentication data in the credential. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga1cb1133fc704a99147e9e5f0ddf35aa0aa9a8a104d5f97636778fce3e205b3cb6"></a><!-- doxytag: member="PJ_STUN_AUTH_CRED_STATIC" ref="gga1cb1133fc704a99147e9e5f0ddf35aa0aa9a8a104d5f97636778fce3e205b3cb6" args="" -->PJ_STUN_AUTH_CRED_STATIC</em>&nbsp;</td><td>
<p>The credential data contains a static credential to be matched against the credential in the message. A static credential can be used as both client side or server side authentication. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga1cb1133fc704a99147e9e5f0ddf35aa0af749ce642bcbd44369d6f43af7f88315"></a><!-- doxytag: member="PJ_STUN_AUTH_CRED_DYNAMIC" ref="gga1cb1133fc704a99147e9e5f0ddf35aa0af749ce642bcbd44369d6f43af7f88315" args="" -->PJ_STUN_AUTH_CRED_DYNAMIC</em>&nbsp;</td><td>
<p>The credential data contains callbacks to be called to verify the credential in the message. A dynamic credential is suitable when performing server side authentication where server does not know in advance the identity of the user requesting authentication. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="ga2b5c95ba6bb32358c11dc2c613f641b0"></a><!-- doxytag: member="stun_auth.h::pj_stun_auth_type" ref="ga2b5c95ba6bb32358c11dc2c613f641b0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJNATH__STUN__AUTH.htm#ga2b5c95ba6bb32358c11dc2c613f641b0">pj_stun_auth_type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Type of authentication. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga2b5c95ba6bb32358c11dc2c613f641b0a5c788ea84fbb14332e35afb2ed839cf9"></a><!-- doxytag: member="PJ_STUN_AUTH_NONE" ref="gga2b5c95ba6bb32358c11dc2c613f641b0a5c788ea84fbb14332e35afb2ed839cf9" args="" -->PJ_STUN_AUTH_NONE</em>&nbsp;</td><td>
<p>No authentication. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga2b5c95ba6bb32358c11dc2c613f641b0a7a9828b8632e3d4ae18ab9da54d1c234"></a><!-- doxytag: member="PJ_STUN_AUTH_SHORT_TERM" ref="gga2b5c95ba6bb32358c11dc2c613f641b0a7a9828b8632e3d4ae18ab9da54d1c234" args="" -->PJ_STUN_AUTH_SHORT_TERM</em>&nbsp;</td><td>
<p>Authentication using short term credential. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga2b5c95ba6bb32358c11dc2c613f641b0af956886ba37dd8c63e382a0718aa5247"></a><!-- doxytag: member="PJ_STUN_AUTH_LONG_TERM" ref="gga2b5c95ba6bb32358c11dc2c613f641b0af956886ba37dd8c63e382a0718aa5247" args="" -->PJ_STUN_AUTH_LONG_TERM</em>&nbsp;</td><td>
<p>Authentication using long term credential. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="gab91bef4d8bf966ccd2a48da636206c28"></a><!-- doxytag: member="stun_auth.h::pj_stun_passwd_type" ref="gab91bef4d8bf966ccd2a48da636206c28" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__PJNATH__STUN__AUTH.htm#gab91bef4d8bf966ccd2a48da636206c28">pj_stun_passwd_type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Type of encoding applied to the password stored in the credential. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggab91bef4d8bf966ccd2a48da636206c28af960b65c6b553f433308ab46fe78bc33"></a><!-- doxytag: member="PJ_STUN_PASSWD_PLAIN" ref="ggab91bef4d8bf966ccd2a48da636206c28af960b65c6b553f433308ab46fe78bc33" args="" -->PJ_STUN_PASSWD_PLAIN</em>&nbsp;</td><td>
<p>Plain text password. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab91bef4d8bf966ccd2a48da636206c28abc51efc77eb3b3e2a558b30cdd9e90ae"></a><!-- doxytag: member="PJ_STUN_PASSWD_HASHED" ref="ggab91bef4d8bf966ccd2a48da636206c28abc51efc77eb3b3e2a558b30cdd9e90ae" args="" -->PJ_STUN_PASSWD_HASHED</em>&nbsp;</td><td>
<p>Hashed password, valid for long term credential only. The hash value of the password is calculated as MD5(USERNAME ":" REALM ":" PASSWD) with all quotes removed from the username and realm values. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gacdda3c9cb9a257152228b0e5e4737c8e"></a><!-- doxytag: member="stun_auth.h::pj_stun_auth_cred_dup" ref="gacdda3c9cb9a257152228b0e5e4737c8e" args="(pj_pool_t *pool, pj_stun_auth_cred *dst, const pj_stun_auth_cred *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="group__PJNATH__STUN__AUTH.htm#gacdda3c9cb9a257152228b0e5e4737c8e">pj_stun_auth_cred_dup</a> </td>
          <td>(</td>
          <td class="paramtype">pj_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate authentication credential.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>Pool to be used to allocate memory. </td></tr>
    <tr><td class="paramname">dst</td><td>Destination credential. </td></tr>
    <tr><td class="paramname">src</td><td>Source credential. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaee822579112dcbb7d9057aac7b56f3d2"></a><!-- doxytag: member="stun_auth.h::pj_stun_auth_valid_for_msg" ref="gaee822579112dcbb7d9057aac7b56f3d2" args="(const pj_stun_msg *msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_bool_t <a class="el" href="group__PJNATH__STUN__AUTH.htm#gaee822579112dcbb7d9057aac7b56f3d2">pj_stun_auth_valid_for_msg</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *&#160;</td>
          <td class="paramname"><em>msg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Determine if STUN message can be authenticated. Some STUN error responses cannot be authenticated since they cannot contain STUN MESSAGE-INTEGRITY attribute. STUN Indication messages also cannot be authenticated.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>The STUN message.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Non-zero if the STUN message can be authenticated. </dd></dl>

</div>
</div>
<a class="anchor" id="gab8d300fc619ce7063915270f1c33f37e"></a><!-- doxytag: member="stun_auth.h::pj_stun_authenticate_request" ref="gab8d300fc619ce7063915270f1c33f37e" args="(const pj_uint8_t *pkt, unsigned pkt_len, const pj_stun_msg *msg, pj_stun_auth_cred *cred, pj_pool_t *pool, pj_stun_req_cred_info *info, pj_stun_msg **p_response)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__AUTH.htm#gab8d300fc619ce7063915270f1c33f37e">pj_stun_authenticate_request</a> </td>
          <td>(</td>
          <td class="paramtype">const pj_uint8_t *&#160;</td>
          <td class="paramname"><em>pkt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>pkt_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> *&#160;</td>
          <td class="paramname"><em>cred</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> **&#160;</td>
          <td class="paramname"><em>p_response</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Verify credential in the STUN request. Note that before calling this function, application must have checked that the message contains PJ_STUN_ATTR_MESSAGE_INTEGRITY attribute by calling <a class="el" href="group__PJNATH__STUN__MSG.htm#gad43b749c5bdafac2962cf3a05e778a13">pj_stun_msg_find_attr()</a> function, because this function will reject the message with 401 error if it doesn't contain PJ_STUN_ATTR_MESSAGE_INTEGRITY attribute.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pkt</td><td>The original packet which has been parsed into the message. This packet MUST NOT have been modified after the parsing. </td></tr>
    <tr><td class="paramname">pkt_len</td><td>The length of the packet. </td></tr>
    <tr><td class="paramname">msg</td><td>The parsed message to be verified. </td></tr>
    <tr><td class="paramname">cred</td><td>Pointer to credential to be used to authenticate the message. </td></tr>
    <tr><td class="paramname">pool</td><td>If response is to be created, then memory will be allocated from this pool. </td></tr>
    <tr><td class="paramname">info</td><td>Optional pointer to receive authentication information found in the request and the credential that is used to authenticate the request. </td></tr>
    <tr><td class="paramname">p_response</td><td>Optional pointer to receive the response message then the credential in the request fails to authenticate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if credential is verified successfully. If the verification fails and <em>p_response</em> is not NULL, an appropriate response will be returned in <em>p_response</em>. </dd></dl>

</div>
</div>
<a class="anchor" id="ga11c17969134bdb4d2a3aa77e3d1f6e6b"></a><!-- doxytag: member="stun_auth.h::pj_stun_authenticate_response" ref="ga11c17969134bdb4d2a3aa77e3d1f6e6b" args="(const pj_uint8_t *pkt, unsigned pkt_len, const pj_stun_msg *msg, const pj_str_t *key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__AUTH.htm#ga11c17969134bdb4d2a3aa77e3d1f6e6b">pj_stun_authenticate_response</a> </td>
          <td>(</td>
          <td class="paramtype">const pj_uint8_t *&#160;</td>
          <td class="paramname"><em>pkt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>pkt_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pj_str_t *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Verify credential in the STUN response. Note that before calling this function, application must have checked that the message contains PJ_STUN_ATTR_MESSAGE_INTEGRITY attribute by calling <a class="el" href="group__PJNATH__STUN__MSG.htm#gad43b749c5bdafac2962cf3a05e778a13">pj_stun_msg_find_attr()</a> function, because otherwise this function will report authentication failure.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pkt</td><td>The original packet which has been parsed into the message. This packet MUST NOT have been modified after the parsing. </td></tr>
    <tr><td class="paramname">pkt_len</td><td>The length of the packet. </td></tr>
    <tr><td class="paramname">msg</td><td>The parsed message to be verified. </td></tr>
    <tr><td class="paramname">key</td><td>Authentication key to calculate MESSAGE-INTEGRITY value. Application can create this key by using <a class="el" href="group__PJNATH__STUN__AUTH.htm#ga9438d242e00241587d3389155f0db8a4">pj_stun_create_key()</a> function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS if credential is verified successfully. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9438d242e00241587d3389155f0db8a4"></a><!-- doxytag: member="stun_auth.h::pj_stun_create_key" ref="ga9438d242e00241587d3389155f0db8a4" args="(pj_pool_t *pool, pj_str_t *key, const pj_str_t *realm, const pj_str_t *username, pj_stun_passwd_type data_type, const pj_str_t *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="group__PJNATH__STUN__AUTH.htm#ga9438d242e00241587d3389155f0db8a4">pj_stun_create_key</a> </td>
          <td>(</td>
          <td class="paramtype">pj_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_str_t *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pj_str_t *&#160;</td>
          <td class="paramname"><em>realm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pj_str_t *&#160;</td>
          <td class="paramname"><em>username</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__AUTH.htm#gab91bef4d8bf966ccd2a48da636206c28">pj_stun_passwd_type</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pj_str_t *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create authentication key to be used for encoding the message with MESSAGE-INTEGRITY. If short term credential is used (i.e. the realm argument is NULL or empty), the key will be copied from the password. If long term credential is used, the key will be calculated from the MD5 hash of the realm, username, and password.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>Pool to allocate memory for the key. </td></tr>
    <tr><td class="paramname">key</td><td>String to receive the key. </td></tr>
    <tr><td class="paramname">realm</td><td>The realm of the credential, if long term credential is to be used. If short term credential is wanted, application can put NULL or empty string here. </td></tr>
    <tr><td class="paramname">username</td><td>The username. </td></tr>
    <tr><td class="paramname">data_type</td><td>Password encoding. </td></tr>
    <tr><td class="paramname">data</td><td>The password. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gae6627e23dea196ac0c3ff5e4135b89ae"></a><!-- doxytag: member="stun_auth.h::pj_stun_req_cred_info_dup" ref="gae6627e23dea196ac0c3ff5e4135b89ae" args="(pj_pool_t *pool, pj_stun_req_cred_info *dst, const pj_stun_req_cred_info *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="group__PJNATH__STUN__AUTH.htm#gae6627e23dea196ac0c3ff5e4135b89ae">pj_stun_req_cred_info_dup</a> </td>
          <td>(</td>
          <td class="paramtype">pj_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__stun__req__cred__info.htm">pj_stun_req_cred_info</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Duplicate request credential.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pool</td><td>Pool to be used to allocate memory. </td></tr>
    <tr><td class="paramname">dst</td><td>Destination credential. </td></tr>
    <tr><td class="paramname">src</td><td>Source credential. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
