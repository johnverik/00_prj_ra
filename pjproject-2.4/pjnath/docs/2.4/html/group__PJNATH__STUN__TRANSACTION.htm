<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>STUN Client Transaction (2.4)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>


<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">STUN Client Transaction</div>  </div>
<div class="ingroups"><a class="el" href="group__PJNATH__STUN__BASE.htm">Base STUN objects</a></div></div><!--header-->
<div class="contents">

<p>STUN client transaction.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__tsx__cb.htm">pj_stun_tsx_cb</a></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga7b7ad1a131c4dc2399e0acb74e59c54d">pj_stun_client_tsx_create</a> (<a class="el" href="structpj__stun__config.htm">pj_stun_config</a> *cfg, pj_pool_t *pool, pj_grp_lock_t *grp_lock, const <a class="el" href="structpj__stun__tsx__cb.htm">pj_stun_tsx_cb</a> *cb, <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> **p_tsx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaadc61402087bdf9815f272c308fa3408">pj_stun_client_tsx_schedule_destroy</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx, const pj_time_val *delay)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gadde00df7771c171aa8a6779f94c5309a">pj_stun_client_tsx_destroy</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga77b0b2ca67af8d8b685b649457b7f007">pj_stun_client_tsx_stop</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_bool_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gad814d012166f7a701b4f85f683f55f04">pj_stun_client_tsx_is_complete</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga2a7340cfb73ff55bc887465480c37169">pj_stun_client_tsx_set_data</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx, void *data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaa20f287c587a3fecf6df4fb1024c96d3">pj_stun_client_tsx_get_data</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaace930d9c1b8042da72de53ef14d864a">pj_stun_client_tsx_send_msg</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx, pj_bool_t retransmit, void *pkt, unsigned pkt_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaa37c2aa251034f553fe7b0cf530c1f51">pj_stun_client_tsx_retransmit</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx, pj_bool_t mod_count)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga70cd4f20ace5669f75ddfcc016063bf1">pj_stun_client_tsx_on_rx_msg</a> (<a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *tsx, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *msg, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<p>The <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm">STUN Client Transaction</a> is used to manage outgoing STUN request, for example to retransmit the request and to notify application about the completion of the request.</p>
<p>The <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm">STUN Client Transaction</a> does not use any networking operations, but instead application must supply the transaction with a callback to be used by the transaction to send outgoing requests. This way the STUN transaction is made more generic and can work with different types of networking codes in application. </p>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="ga5b210a65ffd57be6a72d68338ff577b0"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx" ref="ga5b210a65ffd57be6a72d68338ff577b0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Opaque declaration of STUN client transaction. </p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga7b7ad1a131c4dc2399e0acb74e59c54d"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_create" ref="ga7b7ad1a131c4dc2399e0acb74e59c54d" args="(pj_stun_config *cfg, pj_pool_t *pool, pj_grp_lock_t *grp_lock, const pj_stun_tsx_cb *cb, pj_stun_client_tsx **p_tsx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga7b7ad1a131c4dc2399e0acb74e59c54d">pj_stun_client_tsx_create</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpj__stun__config.htm">pj_stun_config</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_grp_lock_t *&#160;</td>
          <td class="paramname"><em>grp_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__stun__tsx__cb.htm">pj_stun_tsx_cb</a> *&#160;</td>
          <td class="paramname"><em>cb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> **&#160;</td>
          <td class="paramname"><em>p_tsx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create an instance of STUN client transaction. The STUN client transaction is used to transmit outgoing STUN request and to ensure the reliability of the request by periodically retransmitting the request, if necessary.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">cfg</td><td>The STUN endpoint, which will be used to retrieve various settings for the transaction. </td></tr>
    <tr><td class="paramname">pool</td><td>Pool to be used to allocate memory from. </td></tr>
    <tr><td class="paramname">grp_lock</td><td>Group lock to synchronize. </td></tr>
    <tr><td class="paramname">cb</td><td>Callback structure, to be used by the transaction to send message and to notify the application about the completion of the transaction. </td></tr>
    <tr><td class="paramname">p_tsx</td><td>Pointer to receive the transaction instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="gadde00df7771c171aa8a6779f94c5309a"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_destroy" ref="gadde00df7771c171aa8a6779f94c5309a" args="(pj_stun_client_tsx *tsx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gadde00df7771c171aa8a6779f94c5309a">pj_stun_client_tsx_destroy</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Destroy the STUN transaction immediately after the transaction is complete. Application normally calls this function in the on_complete() callback.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN transaction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa20f287c587a3fecf6df4fb1024c96d3"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_get_data" ref="gaa20f287c587a3fecf6df4fb1024c96d3" args="(pj_stun_client_tsx *tsx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaa20f287c587a3fecf6df4fb1024c96d3">pj_stun_client_tsx_get_data</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the user data that was previously associated with the STUN transaction.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN client transaction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The user data. </dd></dl>

</div>
</div>
<a class="anchor" id="gad814d012166f7a701b4f85f683f55f04"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_is_complete" ref="gad814d012166f7a701b4f85f683f55f04" args="(pj_stun_client_tsx *tsx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_bool_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gad814d012166f7a701b4f85f683f55f04">pj_stun_client_tsx_is_complete</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check if transaction has completed.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN transaction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Non-zero if transaction has completed. </dd></dl>

</div>
</div>
<a class="anchor" id="ga70cd4f20ace5669f75ddfcc016063bf1"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_on_rx_msg" ref="ga70cd4f20ace5669f75ddfcc016063bf1" args="(pj_stun_client_tsx *tsx, const pj_stun_msg *msg, const pj_sockaddr_t *src_addr, unsigned src_addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga70cd4f20ace5669f75ddfcc016063bf1">pj_stun_client_tsx_on_rx_msg</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pj_sockaddr_t *&#160;</td>
          <td class="paramname"><em>src_addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>src_addr_len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Notify the STUN transaction about the arrival of STUN response. If the STUN response contains a final error (300 and greater), the transaction will be terminated and callback will be called. If the STUN response contains response code 100-299, retransmission will cease, but application must still call this function again with a final response later to allow the transaction to complete.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN client transaction instance. </td></tr>
    <tr><td class="paramname">msg</td><td>The incoming STUN message. </td></tr>
    <tr><td class="paramname">src_addr</td><td>The source address of the packet. </td></tr>
    <tr><td class="paramname">src_addr_len</td><td>The length of the source address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa37c2aa251034f553fe7b0cf530c1f51"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_retransmit" ref="gaa37c2aa251034f553fe7b0cf530c1f51" args="(pj_stun_client_tsx *tsx, pj_bool_t mod_count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaa37c2aa251034f553fe7b0cf530c1f51">pj_stun_client_tsx_retransmit</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_bool_t&#160;</td>
          <td class="paramname"><em>mod_count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Request to retransmit the request. Normally application should not need to call this function since retransmission would be handled internally, but this functionality is needed by ICE.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN client transaction instance. </td></tr>
    <tr><td class="paramname">mod_count</td><td>Boolean flag to indicate whether transmission count needs to be incremented.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or PJNATH_ESTUNDESTROYED when the user has destroyed the transaction in <em>on_send_msg()</em> callback, or any other error code as returned by <em>on_send_msg()</em> callback. </dd></dl>

</div>
</div>
<a class="anchor" id="gaadc61402087bdf9815f272c308fa3408"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_schedule_destroy" ref="gaadc61402087bdf9815f272c308fa3408" args="(pj_stun_client_tsx *tsx, const pj_time_val *delay)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaadc61402087bdf9815f272c308fa3408">pj_stun_client_tsx_schedule_destroy</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pj_time_val *&#160;</td>
          <td class="paramname"><em>delay</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Schedule timer to destroy the transaction after the transaction is complete. Application normally calls this function in the on_complete() callback. When this timer elapsed, the on_destroy() callback will be called.</p>
<p>This is convenient to let the STUN transaction absorbs any response for the previous request retransmissions. If application doesn't want this, it can destroy the transaction immediately by calling <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gadde00df7771c171aa8a6779f94c5309a">pj_stun_client_tsx_destroy()</a>.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN transaction. </td></tr>
    <tr><td class="paramname">delay</td><td>The delay interval before on_destroy() callback is called.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or the appropriate error code. </dd></dl>

</div>
</div>
<a class="anchor" id="gaace930d9c1b8042da72de53ef14d864a"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_send_msg" ref="gaace930d9c1b8042da72de53ef14d864a" args="(pj_stun_client_tsx *tsx, pj_bool_t retransmit, void *pkt, unsigned pkt_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaace930d9c1b8042da72de53ef14d864a">pj_stun_client_tsx_send_msg</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pj_bool_t&#160;</td>
          <td class="paramname"><em>retransmit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pkt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>pkt_len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Start the STUN client transaction by sending STUN request using this transaction. If reliable transport such as TCP or TLS is used, the retransmit flag should be set to PJ_FALSE because reliablity will be assured by the transport layer.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN client transaction. </td></tr>
    <tr><td class="paramname">retransmit</td><td>Should this message be retransmitted by the STUN transaction. </td></tr>
    <tr><td class="paramname">pkt</td><td>The STUN packet to send. </td></tr>
    <tr><td class="paramname">pkt_len</td><td>Length of STUN packet.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success, or PJNATH_ESTUNDESTROYED when the user has destroyed the transaction in <em>on_send_msg()</em> callback, or any other error code as returned by <em>on_send_msg()</em> callback. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2a7340cfb73ff55bc887465480c37169"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_set_data" ref="ga2a7340cfb73ff55bc887465480c37169" args="(pj_stun_client_tsx *tsx, void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga2a7340cfb73ff55bc887465480c37169">pj_stun_client_tsx_set_data</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Associate an arbitrary data with the STUN transaction. This data can be then retrieved later from the transaction, by using <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#gaa20f287c587a3fecf6df4fb1024c96d3">pj_stun_client_tsx_get_data()</a> function.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN client transaction. </td></tr>
    <tr><td class="paramname">data</td><td>Application data to be associated with the STUN transaction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga77b0b2ca67af8d8b685b649457b7f007"></a><!-- doxytag: member="stun_transaction.h::pj_stun_client_tsx_stop" ref="ga77b0b2ca67af8d8b685b649457b7f007" args="(pj_stun_client_tsx *tsx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t <a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga77b0b2ca67af8d8b685b649457b7f007">pj_stun_client_tsx_stop</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__PJNATH__STUN__TRANSACTION.htm#ga5b210a65ffd57be6a72d68338ff577b0">pj_stun_client_tsx</a> *&#160;</td>
          <td class="paramname"><em>tsx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Stop the client transaction.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">tsx</td><td>The STUN transaction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>PJ_SUCCESS on success or PJ_EINVAL if the parameter is NULL. </dd></dl>

</div>
</div>
</div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
