<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pj_stun_session_cb Struct Reference (2.4)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>


<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="functions.htm"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">pj_stun_session_cb Struct Reference<div class="ingroups"><a class="el" href="group__PJNATH__STUN__SESSION.htm">STUN session</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="pj_stun_session_cb" --><table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__session__cb.htm#a1e44ab6e7a961fa1485fa6843565cd12">on_send_msg</a> )(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, void *token, const void *pkt, pj_size_t pkt_size, const pj_sockaddr_t *dst_addr, unsigned addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__session__cb.htm#a19bd794c37ba3518e4a7ce425b91e11f">on_rx_request</a> )(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, const pj_uint8_t *pkt, unsigned pkt_len, const <a class="el" href="structpj__stun__rx__data.htm">pj_stun_rx_data</a> *rdata, void *token, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__session__cb.htm#a0dc003689841ec626722f4d2717566d1">on_request_complete</a> )(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, pj_status_t status, void *token, <a class="el" href="structpj__stun__tx__data.htm">pj_stun_tx_data</a> *tdata, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *response, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">pj_status_t(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpj__stun__session__cb.htm#a26d8925ea7172372a287d689bd0a0fda">on_rx_indication</a> )(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, const pj_uint8_t *pkt, unsigned pkt_len, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *msg, void *token, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This is the callback to be registered to pj_stun_session, to send outgoing message and to receive various notifications from the STUN session. </p>
</div><hr/><h2>Field Documentation</h2>
<a class="anchor" id="a0dc003689841ec626722f4d2717566d1"></a><!-- doxytag: member="pj_stun_session_cb::on_request_complete" ref="a0dc003689841ec626722f4d2717566d1" args=")(pj_stun_session *sess, pj_status_t status, void *token, pj_stun_tx_data *tdata, const pj_stun_msg *response, const pj_sockaddr_t *src_addr, unsigned src_addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* <a class="el" href="structpj__stun__session__cb.htm#a0dc003689841ec626722f4d2717566d1">pj_stun_session_cb::on_request_complete</a>)(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, pj_status_t status, void *token, <a class="el" href="structpj__stun__tx__data.htm">pj_stun_tx_data</a> *tdata, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *response, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Callback to be called when response is received or the transaction has timed out. This callback is called either when application calls <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> with the packet containing a STUN response for the client transaction, or when the internal timer of the STUN client transaction has timed-out before a STUN response is received.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">sess</td><td>The STUN session. </td></tr>
    <tr><td class="paramname">status</td><td>Status of the request. If the value if not PJ_SUCCESS, the transaction has timed-out or other error has occurred, and the response argument may be NULL. Note that when the status is not success, the response may contain non-NULL value if the response contains STUN ERROR-CODE attribute. </td></tr>
    <tr><td class="paramname">token</td><td>The token that was set by the application when calling <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga69d39f4165f0e54ee1806cf342b52f47">pj_stun_session_send_msg()</a> function. Please not that this token IS NOT the token that was given in <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a>. </td></tr>
    <tr><td class="paramname">tdata</td><td>The original STUN request. </td></tr>
    <tr><td class="paramname">response</td><td>The response message, on successful transaction, or otherwise MAY BE NULL if status is not success. Note that when the status is not success, this argument may contain non-NULL value if the response contains STUN ERROR-CODE attribute. </td></tr>
    <tr><td class="paramname">src_addr</td><td>The source address where the response was received, or NULL if the response is NULL. </td></tr>
    <tr><td class="paramname">src_addr_len</td><td>The length of the source address. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a26d8925ea7172372a287d689bd0a0fda"></a><!-- doxytag: member="pj_stun_session_cb::on_rx_indication" ref="a26d8925ea7172372a287d689bd0a0fda" args=")(pj_stun_session *sess, const pj_uint8_t *pkt, unsigned pkt_len, const pj_stun_msg *msg, void *token, const pj_sockaddr_t *src_addr, unsigned src_addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t(* <a class="el" href="structpj__stun__session__cb.htm#a26d8925ea7172372a287d689bd0a0fda">pj_stun_session_cb::on_rx_indication</a>)(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, const pj_uint8_t *pkt, unsigned pkt_len, const <a class="el" href="structpj__stun__msg.htm">pj_stun_msg</a> *msg, void *token, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Callback to be called on incoming STUN request message. This function is called when application calls <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> and when the STUN session has detected that the incoming STUN message is a STUN indication message.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">sess</td><td>The STUN session. </td></tr>
    <tr><td class="paramname">pkt</td><td>Pointer to the original STUN packet. </td></tr>
    <tr><td class="paramname">pkt_len</td><td>Length of the STUN packet. </td></tr>
    <tr><td class="paramname">msg</td><td>The parsed STUN indication. </td></tr>
    <tr><td class="paramname">token</td><td>The token that was set by the application when calling <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> function. </td></tr>
    <tr><td class="paramname">src_addr</td><td>Source address of the packet. </td></tr>
    <tr><td class="paramname">src_addr_len</td><td>Length of the source address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The return value of this callback will be returned back to <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> function. </dd></dl>

</div>
</div>
<a class="anchor" id="a19bd794c37ba3518e4a7ce425b91e11f"></a><!-- doxytag: member="pj_stun_session_cb::on_rx_request" ref="a19bd794c37ba3518e4a7ce425b91e11f" args=")(pj_stun_session *sess, const pj_uint8_t *pkt, unsigned pkt_len, const pj_stun_rx_data *rdata, void *token, const pj_sockaddr_t *src_addr, unsigned src_addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t(* <a class="el" href="structpj__stun__session__cb.htm#a19bd794c37ba3518e4a7ce425b91e11f">pj_stun_session_cb::on_rx_request</a>)(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, const pj_uint8_t *pkt, unsigned pkt_len, const <a class="el" href="structpj__stun__rx__data.htm">pj_stun_rx_data</a> *rdata, void *token, const pj_sockaddr_t *src_addr, unsigned src_addr_len)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Callback to be called on incoming STUN request message. This function is called when application calls <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> and when the STUN session has detected that the incoming STUN message is a STUN request message. In the callback processing, application MUST create a response by calling pj_stun_session_create_response() function and send the response with <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga69d39f4165f0e54ee1806cf342b52f47">pj_stun_session_send_msg()</a> function, before returning from the callback.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">sess</td><td>The STUN session. </td></tr>
    <tr><td class="paramname">pkt</td><td>Pointer to the original STUN packet. </td></tr>
    <tr><td class="paramname">pkt_len</td><td>Length of the STUN packet. </td></tr>
    <tr><td class="paramname">rdata</td><td>Data containing incoming request message. </td></tr>
    <tr><td class="paramname">token</td><td>The token that was set by the application when calling <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> function. </td></tr>
    <tr><td class="paramname">src_addr</td><td>Source address of the packet. </td></tr>
    <tr><td class="paramname">src_addr_len</td><td>Length of the source address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The return value of this callback will be returned back to <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> function. </dd></dl>

</div>
</div>
<a class="anchor" id="a1e44ab6e7a961fa1485fa6843565cd12"></a><!-- doxytag: member="pj_stun_session_cb::on_send_msg" ref="a1e44ab6e7a961fa1485fa6843565cd12" args=")(pj_stun_session *sess, void *token, const void *pkt, pj_size_t pkt_size, const pj_sockaddr_t *dst_addr, unsigned addr_len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">pj_status_t(* <a class="el" href="structpj__stun__session__cb.htm#a1e44ab6e7a961fa1485fa6843565cd12">pj_stun_session_cb::on_send_msg</a>)(<a class="el" href="group__PJNATH__STUN__SESSION.htm#gac3fc8c37c0d50c5daac0944b3c109cc9">pj_stun_session</a> *sess, void *token, const void *pkt, pj_size_t pkt_size, const pj_sockaddr_t *dst_addr, unsigned addr_len)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Callback to be called by the STUN session to send outgoing message.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">sess</td><td>The STUN session. </td></tr>
    <tr><td class="paramname">token</td><td>The token associated with this outgoing message and was set by the application. This token was set by application in <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga69d39f4165f0e54ee1806cf342b52f47">pj_stun_session_send_msg()</a> for outgoing messages that are initiated by the application, or in <a class="el" href="group__PJNATH__STUN__SESSION.htm#ga1c091311b90e4d6e25f7dc1c7b8cbe8c">pj_stun_session_on_rx_pkt()</a> if this message is a response that was internally generated by the STUN session (for example, an 401/Unauthorized response). Application may use this facility for any purposes. </td></tr>
    <tr><td class="paramname">pkt</td><td>Packet to be sent. </td></tr>
    <tr><td class="paramname">pkt_size</td><td>Size of the packet to be sent. </td></tr>
    <tr><td class="paramname">dst_addr</td><td>The destination address. </td></tr>
    <tr><td class="paramname">addr_len</td><td>Length of destination address.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The callback should return the status of the packet sending. </dd></dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li><a class="el" href="stun__session_8h_source.htm">stun_session.h</a></li>
</ul>
</div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
