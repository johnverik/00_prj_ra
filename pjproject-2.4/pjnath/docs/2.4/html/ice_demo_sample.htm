<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>ice_demo, an interactive ICE endpoint (2.4)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>


<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">ice_demo, an interactive ICE endpoint </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This sample demonstrates how to use <a class="el" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm">ICE stream transport</a> <b>without</b> using signaling protocol such as SIP. It provides interactive user interface to create and manage the ICE sessions as well as to exchange SDP with another ice_demo instance.</p>
<p>Features of the demo application:</p>
<ul>
<li>supports host, STUN, and TURN candidates</li>
<li>disabling of host candidates</li>
<li>DNS SRV resolution for STUN and TURN servers</li>
<li>TCP connection to TURN server</li>
<li>Optional use of fingerprint for TURN</li>
<li>prints and parse SDP containing ICE infos</li>
<li>exchange SDP with copy/paste</li>
</ul>
<p>This file is pjsip-apps/src/samples/icedemo.c</p>
<p>Screenshot on WinXP: </p>
<div class="image">
<img src="ice_demo.jpg" alt="ice_demo.jpg"/>
<div class="caption">
ice_demo on WinXP</div></div>
 <div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: icedemo.c 4624 2013-10-21 06:37:30Z ming $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00006"></a>00006 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00007"></a>00007 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00008"></a>00008 <span class="comment"> * (at your option) any later version.</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00011"></a>00011 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00012"></a>00012 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00014"></a>00014 <span class="comment"> *</span>
<a name="l00015"></a>00015 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00016"></a>00016 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00017"></a>00017 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00018"></a>00018 <span class="comment"> */</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;pjlib-util.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;pjnath.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#define THIS_FILE   &quot;icedemo.c&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="comment">/* For this demo app, configure longer STUN keep-alive time</span>
<a name="l00029"></a>00029 <span class="comment"> * so that it does&#39;t clutter the screen output.</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 <span class="preprocessor">#define KA_INTERVAL 300</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">/* This is our global variables */</span>
<a name="l00035"></a>00035 <span class="keyword">static</span> <span class="keyword">struct </span>app_t
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037     <span class="comment">/* Command line options are stored here */</span>
<a name="l00038"></a>00038     <span class="keyword">struct </span>options
<a name="l00039"></a>00039     {
<a name="l00040"></a>00040         <span class="keywordtype">unsigned</span>    comp_cnt;
<a name="l00041"></a>00041         pj_str_t    ns;
<a name="l00042"></a>00042         <span class="keywordtype">int</span>         max_host;
<a name="l00043"></a>00043         pj_bool_t   regular;
<a name="l00044"></a>00044         pj_str_t    stun_srv;
<a name="l00045"></a>00045         pj_str_t    turn_srv;
<a name="l00046"></a>00046         pj_bool_t   turn_tcp;
<a name="l00047"></a>00047         pj_str_t    turn_username;
<a name="l00048"></a>00048         pj_str_t    turn_password;
<a name="l00049"></a>00049         pj_bool_t   turn_fingerprint;
<a name="l00050"></a>00050         <span class="keyword">const</span> <span class="keywordtype">char</span> *log_file;
<a name="l00051"></a>00051     } opt;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <span class="comment">/* Our global variables */</span>
<a name="l00054"></a>00054     pj_caching_pool      cp;
<a name="l00055"></a>00055     pj_pool_t           *pool;
<a name="l00056"></a>00056     pj_thread_t         *thread;
<a name="l00057"></a>00057     pj_bool_t            thread_quit_flag;
<a name="l00058"></a>00058     <a class="code" href="structpj__ice__strans__cfg.htm">pj_ice_strans_cfg</a>    ice_cfg;
<a name="l00059"></a>00059     <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gaa9165b87d23b50b113371350a5f7aed0">pj_ice_strans</a>       *icest;
<a name="l00060"></a>00060     FILE                *log_fhnd;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062     <span class="comment">/* Variables to store parsed remote ICE info */</span>
<a name="l00063"></a>00063     <span class="keyword">struct </span>rem_info
<a name="l00064"></a>00064     {
<a name="l00065"></a>00065         <span class="keywordtype">char</span>             ufrag[80];
<a name="l00066"></a>00066         <span class="keywordtype">char</span>             pwd[80];
<a name="l00067"></a>00067         <span class="keywordtype">unsigned</span>         comp_cnt;
<a name="l00068"></a>00068         pj_sockaddr      def_addr[<a class="code" href="group__PJNATH__CONFIG.htm#gae190e71cca70f0039cc321746186a609">PJ_ICE_MAX_COMP</a>];
<a name="l00069"></a>00069         <span class="keywordtype">unsigned</span>         cand_cnt;
<a name="l00070"></a>00070         <a class="code" href="structpj__ice__sess__cand.htm">pj_ice_sess_cand</a> cand[<a class="code" href="group__PJNATH__CONFIG.htm#gaf7cc11a09f459e96122fbba968cbaa4e">PJ_ICE_ST_MAX_CAND</a>];
<a name="l00071"></a>00071     } rem;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 } icedemo;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">/* Utility to display error messages */</span>
<a name="l00076"></a>00076 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_perror(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, pj_status_t status)
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078     <span class="keywordtype">char</span> errmsg[PJ_ERR_MSG_SIZE];
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     pj_strerror(status, errmsg, <span class="keyword">sizeof</span>(errmsg));
<a name="l00081"></a>00081     PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;%s: %s&quot;</span>, title, errmsg));
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">/* Utility: display error message and exit application (usually</span>
<a name="l00085"></a>00085 <span class="comment"> * because of fatal error.</span>
<a name="l00086"></a>00086 <span class="comment"> */</span>
<a name="l00087"></a>00087 <span class="keyword">static</span> <span class="keywordtype">void</span> err_exit(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, pj_status_t status)
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00090"></a>00090         icedemo_perror(title, status);
<a name="l00091"></a>00091     }
<a name="l00092"></a>00092     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;Shutting down..&quot;</span>));
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="keywordflow">if</span> (icedemo.icest)
<a name="l00095"></a>00095         <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga22326f9203e11399f710f46760d4ce8b">pj_ice_strans_destroy</a>(icedemo.icest);
<a name="l00096"></a>00096     
<a name="l00097"></a>00097     pj_thread_sleep(500);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     icedemo.thread_quit_flag = PJ_TRUE;
<a name="l00100"></a>00100     <span class="keywordflow">if</span> (icedemo.thread) {
<a name="l00101"></a>00101         pj_thread_join(icedemo.thread);
<a name="l00102"></a>00102         pj_thread_destroy(icedemo.thread);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="keywordflow">if</span> (icedemo.ice_cfg.stun_cfg.ioqueue)
<a name="l00106"></a>00106         pj_ioqueue_destroy(icedemo.ice_cfg.stun_cfg.ioqueue);
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="keywordflow">if</span> (icedemo.ice_cfg.stun_cfg.timer_heap)
<a name="l00109"></a>00109         pj_timer_heap_destroy(icedemo.ice_cfg.stun_cfg.timer_heap);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     pj_caching_pool_destroy(&amp;icedemo.cp);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     pj_shutdown();
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="keywordflow">if</span> (icedemo.log_fhnd) {
<a name="l00116"></a>00116         fclose(icedemo.log_fhnd);
<a name="l00117"></a>00117         icedemo.log_fhnd = NULL;
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120     exit(status != PJ_SUCCESS);
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="preprocessor">#define CHECK(expr)     status=expr; \</span>
<a name="l00124"></a>00124 <span class="preprocessor">                        if (status!=PJ_SUCCESS) { \</span>
<a name="l00125"></a>00125 <span class="preprocessor">                            err_exit(#expr, status); \</span>
<a name="l00126"></a>00126 <span class="preprocessor">                        }</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span>
<a name="l00128"></a>00128 <span class="comment">/*</span>
<a name="l00129"></a>00129 <span class="comment"> * This function checks for events from both timer and ioqueue (for</span>
<a name="l00130"></a>00130 <span class="comment"> * network events). It is invoked by the worker thread.</span>
<a name="l00131"></a>00131 <span class="comment"> */</span>
<a name="l00132"></a>00132 <span class="keyword">static</span> pj_status_t handle_events(<span class="keywordtype">unsigned</span> max_msec, <span class="keywordtype">unsigned</span> *p_count)
<a name="l00133"></a>00133 {
<a name="l00134"></a>00134     <span class="keyword">enum</span> { MAX_NET_EVENTS = 1 };
<a name="l00135"></a>00135     pj_time_val max_timeout = {0, 0};
<a name="l00136"></a>00136     pj_time_val timeout = { 0, 0};
<a name="l00137"></a>00137     <span class="keywordtype">unsigned</span> count = 0, net_event_count = 0;
<a name="l00138"></a>00138     <span class="keywordtype">int</span> c;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     max_timeout.msec = max_msec;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142     <span class="comment">/* Poll the timer to run it and also to retrieve the earliest entry. */</span>
<a name="l00143"></a>00143     timeout.sec = timeout.msec = 0;
<a name="l00144"></a>00144     c = pj_timer_heap_poll( icedemo.ice_cfg.stun_cfg.timer_heap, &amp;timeout );
<a name="l00145"></a>00145     <span class="keywordflow">if</span> (c &gt; 0)
<a name="l00146"></a>00146         count += c;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <span class="comment">/* timer_heap_poll should never ever returns negative value, or otherwise</span>
<a name="l00149"></a>00149 <span class="comment">     * ioqueue_poll() will block forever!</span>
<a name="l00150"></a>00150 <span class="comment">     */</span>
<a name="l00151"></a>00151     pj_assert(timeout.sec &gt;= 0 &amp;&amp; timeout.msec &gt;= 0);
<a name="l00152"></a>00152     <span class="keywordflow">if</span> (timeout.msec &gt;= 1000) timeout.msec = 999;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154     <span class="comment">/* compare the value with the timeout to wait from timer, and use the </span>
<a name="l00155"></a>00155 <span class="comment">     * minimum value. </span>
<a name="l00156"></a>00156 <span class="comment">    */</span>
<a name="l00157"></a>00157     <span class="keywordflow">if</span> (PJ_TIME_VAL_GT(timeout, max_timeout))
<a name="l00158"></a>00158         timeout = max_timeout;
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">/* Poll ioqueue. </span>
<a name="l00161"></a>00161 <span class="comment">     * Repeat polling the ioqueue while we have immediate events, because</span>
<a name="l00162"></a>00162 <span class="comment">     * timer heap may process more than one events, so if we only process</span>
<a name="l00163"></a>00163 <span class="comment">     * one network events at a time (such as when IOCP backend is used),</span>
<a name="l00164"></a>00164 <span class="comment">     * the ioqueue may have trouble keeping up with the request rate.</span>
<a name="l00165"></a>00165 <span class="comment">     *</span>
<a name="l00166"></a>00166 <span class="comment">     * For example, for each send() request, one network event will be</span>
<a name="l00167"></a>00167 <span class="comment">     *   reported by ioqueue for the send() completion. If we don&#39;t poll</span>
<a name="l00168"></a>00168 <span class="comment">     *   the ioqueue often enough, the send() completion will not be</span>
<a name="l00169"></a>00169 <span class="comment">     *   reported in timely manner.</span>
<a name="l00170"></a>00170 <span class="comment">     */</span>
<a name="l00171"></a>00171     <span class="keywordflow">do</span> {
<a name="l00172"></a>00172         c = pj_ioqueue_poll( icedemo.ice_cfg.stun_cfg.ioqueue, &amp;timeout);
<a name="l00173"></a>00173         <span class="keywordflow">if</span> (c &lt; 0) {
<a name="l00174"></a>00174             pj_status_t err = pj_get_netos_error();
<a name="l00175"></a>00175             pj_thread_sleep(PJ_TIME_VAL_MSEC(timeout));
<a name="l00176"></a>00176             <span class="keywordflow">if</span> (p_count)
<a name="l00177"></a>00177                 *p_count = count;
<a name="l00178"></a>00178             <span class="keywordflow">return</span> err;
<a name="l00179"></a>00179         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c == 0) {
<a name="l00180"></a>00180             <span class="keywordflow">break</span>;
<a name="l00181"></a>00181         } <span class="keywordflow">else</span> {
<a name="l00182"></a>00182             net_event_count += c;
<a name="l00183"></a>00183             timeout.sec = timeout.msec = 0;
<a name="l00184"></a>00184         }
<a name="l00185"></a>00185     } <span class="keywordflow">while</span> (c &gt; 0 &amp;&amp; net_event_count &lt; MAX_NET_EVENTS);
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     count += net_event_count;
<a name="l00188"></a>00188     <span class="keywordflow">if</span> (p_count)
<a name="l00189"></a>00189         *p_count = count;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="comment">/*</span>
<a name="l00196"></a>00196 <span class="comment"> * This is the worker thread that polls event in the background.</span>
<a name="l00197"></a>00197 <span class="comment"> */</span>
<a name="l00198"></a>00198 <span class="keyword">static</span> <span class="keywordtype">int</span> icedemo_worker_thread(<span class="keywordtype">void</span> *unused)
<a name="l00199"></a>00199 {
<a name="l00200"></a>00200     PJ_UNUSED_ARG(unused);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202     <span class="keywordflow">while</span> (!icedemo.thread_quit_flag) {
<a name="l00203"></a>00203         handle_events(500, NULL);
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206     <span class="keywordflow">return</span> 0;
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="comment">/*</span>
<a name="l00210"></a>00210 <span class="comment"> * This is the callback that is registered to the ICE stream transport to</span>
<a name="l00211"></a>00211 <span class="comment"> * receive notification about incoming data. By &quot;data&quot; it means application</span>
<a name="l00212"></a>00212 <span class="comment"> * data such as RTP/RTCP, and not packets that belong to ICE signaling (such</span>
<a name="l00213"></a>00213 <span class="comment"> * as STUN connectivity checks or TURN signaling).</span>
<a name="l00214"></a>00214 <span class="comment"> */</span>
<a name="l00215"></a>00215 <span class="keyword">static</span> <span class="keywordtype">void</span> cb_on_rx_data(<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gaa9165b87d23b50b113371350a5f7aed0">pj_ice_strans</a> *ice_st,
<a name="l00216"></a>00216                           <span class="keywordtype">unsigned</span> comp_id, 
<a name="l00217"></a>00217                           <span class="keywordtype">void</span> *pkt, pj_size_t size,
<a name="l00218"></a>00218                           <span class="keyword">const</span> pj_sockaddr_t *src_addr,
<a name="l00219"></a>00219                           <span class="keywordtype">unsigned</span> src_addr_len)
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221     <span class="keywordtype">char</span> ipstr[PJ_INET6_ADDRSTRLEN+10];
<a name="l00222"></a>00222 
<a name="l00223"></a>00223     PJ_UNUSED_ARG(ice_st);
<a name="l00224"></a>00224     PJ_UNUSED_ARG(src_addr_len);
<a name="l00225"></a>00225     PJ_UNUSED_ARG(pkt);
<a name="l00226"></a>00226 
<a name="l00227"></a>00227     <span class="comment">// Don&#39;t do this! It will ruin the packet buffer in case TCP is used!</span>
<a name="l00228"></a>00228     <span class="comment">//((char*)pkt)[size] = &#39;\0&#39;;</span>
<a name="l00229"></a>00229 
<a name="l00230"></a>00230     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;Component %d: received %d bytes data from %s: \&quot;%.*s\&quot;&quot;</span>,
<a name="l00231"></a>00231               comp_id, size,
<a name="l00232"></a>00232               pj_sockaddr_print(src_addr, ipstr, <span class="keyword">sizeof</span>(ipstr), 3),
<a name="l00233"></a>00233               (<span class="keywordtype">unsigned</span>)size,
<a name="l00234"></a>00234               (<span class="keywordtype">char</span>*)pkt));
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">/*</span>
<a name="l00238"></a>00238 <span class="comment"> * This is the callback that is registered to the ICE stream transport to</span>
<a name="l00239"></a>00239 <span class="comment"> * receive notification about ICE state progression.</span>
<a name="l00240"></a>00240 <span class="comment"> */</span>
<a name="l00241"></a>00241 <span class="keyword">static</span> <span class="keywordtype">void</span> cb_on_ice_complete(<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gaa9165b87d23b50b113371350a5f7aed0">pj_ice_strans</a> *ice_st, 
<a name="l00242"></a>00242                                <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga7e21cd8a6d334eb429d766bd03266f36">pj_ice_strans_op</a> op,
<a name="l00243"></a>00243                                pj_status_t status)
<a name="l00244"></a>00244 {
<a name="l00245"></a>00245     <span class="keyword">const</span> <span class="keywordtype">char</span> *opname = 
<a name="l00246"></a>00246         (op==<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gga7e21cd8a6d334eb429d766bd03266f36a3dec577623adf174527f97a0a1efa78e">PJ_ICE_STRANS_OP_INIT</a>? <span class="stringliteral">&quot;initialization&quot;</span> :
<a name="l00247"></a>00247             (op==<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gga7e21cd8a6d334eb429d766bd03266f36a4426b676f595116ca6601935560f9cba">PJ_ICE_STRANS_OP_NEGOTIATION</a> ? <span class="stringliteral">&quot;negotiation&quot;</span> : <span class="stringliteral">&quot;unknown_op&quot;</span>));
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l00250"></a>00250         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;ICE %s successful&quot;</span>, opname));
<a name="l00251"></a>00251     } <span class="keywordflow">else</span> {
<a name="l00252"></a>00252         <span class="keywordtype">char</span> errmsg[PJ_ERR_MSG_SIZE];
<a name="l00253"></a>00253 
<a name="l00254"></a>00254         pj_strerror(status, errmsg, <span class="keyword">sizeof</span>(errmsg));
<a name="l00255"></a>00255         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;ICE %s failed: %s&quot;</span>, opname, errmsg));
<a name="l00256"></a>00256         <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga22326f9203e11399f710f46760d4ce8b">pj_ice_strans_destroy</a>(ice_st);
<a name="l00257"></a>00257         icedemo.icest = NULL;
<a name="l00258"></a>00258     }
<a name="l00259"></a>00259 }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 <span class="comment">/* log callback to write to file */</span>
<a name="l00262"></a>00262 <span class="keyword">static</span> <span class="keywordtype">void</span> log_func(<span class="keywordtype">int</span> level, <span class="keyword">const</span> <span class="keywordtype">char</span> *data, <span class="keywordtype">int</span> len)
<a name="l00263"></a>00263 {
<a name="l00264"></a>00264     pj_log_write(level, data, len);
<a name="l00265"></a>00265     <span class="keywordflow">if</span> (icedemo.log_fhnd) {
<a name="l00266"></a>00266         <span class="keywordflow">if</span> (fwrite(data, len, 1, icedemo.log_fhnd) != 1)
<a name="l00267"></a>00267             <span class="keywordflow">return</span>;
<a name="l00268"></a>00268     }
<a name="l00269"></a>00269 }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">/*</span>
<a name="l00272"></a>00272 <span class="comment"> * This is the main application initialization function. It is called</span>
<a name="l00273"></a>00273 <span class="comment"> * once (and only once) during application initialization sequence by </span>
<a name="l00274"></a>00274 <span class="comment"> * main().</span>
<a name="l00275"></a>00275 <span class="comment"> */</span>
<a name="l00276"></a>00276 <span class="keyword">static</span> pj_status_t icedemo_init(<span class="keywordtype">void</span>)
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278     pj_status_t status;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280     <span class="keywordflow">if</span> (icedemo.opt.log_file) {
<a name="l00281"></a>00281         icedemo.log_fhnd = fopen(icedemo.opt.log_file, <span class="stringliteral">&quot;a&quot;</span>);
<a name="l00282"></a>00282         pj_log_set_log_func(&amp;log_func);
<a name="l00283"></a>00283     }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285     <span class="comment">/* Initialize the libraries before anything else */</span>
<a name="l00286"></a>00286     CHECK( pj_init() );
<a name="l00287"></a>00287     CHECK( pjlib_util_init() );
<a name="l00288"></a>00288     CHECK( <a class="code" href="group__PJNATH.htm#gae0efc3dd76da8e22cc5f6fcdd632426b">pjnath_init</a>() );
<a name="l00289"></a>00289 
<a name="l00290"></a>00290     <span class="comment">/* Must create pool factory, where memory allocations come from */</span>
<a name="l00291"></a>00291     pj_caching_pool_init(&amp;icedemo.cp, NULL, 0);
<a name="l00292"></a>00292 
<a name="l00293"></a>00293     <span class="comment">/* Init our ICE settings with null values */</span>
<a name="l00294"></a>00294     <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gaa90900a9eda40be690494d585c2cc033">pj_ice_strans_cfg_default</a>(&amp;icedemo.ice_cfg);
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     icedemo.ice_cfg.stun_cfg.pf = &amp;icedemo.cp.factory;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <span class="comment">/* Create application memory pool */</span>
<a name="l00299"></a>00299     icedemo.pool = pj_pool_create(&amp;icedemo.cp.factory, <span class="stringliteral">&quot;icedemo&quot;</span>, 
<a name="l00300"></a>00300                                   512, 512, NULL);
<a name="l00301"></a>00301 
<a name="l00302"></a>00302     <span class="comment">/* Create timer heap for timer stuff */</span>
<a name="l00303"></a>00303     CHECK( pj_timer_heap_create(icedemo.pool, 100, 
<a name="l00304"></a>00304                                 &amp;icedemo.ice_cfg.stun_cfg.timer_heap) );
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <span class="comment">/* and create ioqueue for network I/O stuff */</span>
<a name="l00307"></a>00307     CHECK( pj_ioqueue_create(icedemo.pool, 16, 
<a name="l00308"></a>00308                              &amp;icedemo.ice_cfg.stun_cfg.ioqueue) );
<a name="l00309"></a>00309 
<a name="l00310"></a>00310     <span class="comment">/* something must poll the timer heap and ioqueue, </span>
<a name="l00311"></a>00311 <span class="comment">     * unless we&#39;re on Symbian where the timer heap and ioqueue run</span>
<a name="l00312"></a>00312 <span class="comment">     * on themselves.</span>
<a name="l00313"></a>00313 <span class="comment">     */</span>
<a name="l00314"></a>00314     CHECK( pj_thread_create(icedemo.pool, <span class="stringliteral">&quot;icedemo&quot;</span>, &amp;icedemo_worker_thread,
<a name="l00315"></a>00315                             NULL, 0, 0, &amp;icedemo.thread) );
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     icedemo.ice_cfg.af = pj_AF_INET();
<a name="l00318"></a>00318 
<a name="l00319"></a>00319     <span class="comment">/* Create DNS resolver if nameserver is set */</span>
<a name="l00320"></a>00320     <span class="keywordflow">if</span> (icedemo.opt.ns.slen) {
<a name="l00321"></a>00321         CHECK( pj_dns_resolver_create(&amp;icedemo.cp.factory, 
<a name="l00322"></a>00322                                       <span class="stringliteral">&quot;resolver&quot;</span>, 
<a name="l00323"></a>00323                                       0, 
<a name="l00324"></a>00324                                       icedemo.ice_cfg.stun_cfg.timer_heap,
<a name="l00325"></a>00325                                       icedemo.ice_cfg.stun_cfg.ioqueue, 
<a name="l00326"></a>00326                                       &amp;icedemo.ice_cfg.resolver) );
<a name="l00327"></a>00327 
<a name="l00328"></a>00328         CHECK( pj_dns_resolver_set_ns(icedemo.ice_cfg.resolver, 1, 
<a name="l00329"></a>00329                                       &amp;icedemo.opt.ns, NULL) );
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332     <span class="comment">/* -= Start initializing ICE stream transport config =- */</span>
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="comment">/* Maximum number of host candidates */</span>
<a name="l00335"></a>00335     <span class="keywordflow">if</span> (icedemo.opt.max_host != -1)
<a name="l00336"></a>00336         icedemo.ice_cfg.stun.max_host_cands = icedemo.opt.max_host;
<a name="l00337"></a>00337 
<a name="l00338"></a>00338     <span class="comment">/* Nomination strategy */</span>
<a name="l00339"></a>00339     <span class="keywordflow">if</span> (icedemo.opt.regular)
<a name="l00340"></a>00340         icedemo.ice_cfg.opt.aggressive = PJ_FALSE;
<a name="l00341"></a>00341     <span class="keywordflow">else</span>
<a name="l00342"></a>00342         icedemo.ice_cfg.opt.aggressive = PJ_TRUE;
<a name="l00343"></a>00343 
<a name="l00344"></a>00344     <span class="comment">/* Configure STUN/srflx candidate resolution */</span>
<a name="l00345"></a>00345     <span class="keywordflow">if</span> (icedemo.opt.stun_srv.slen) {
<a name="l00346"></a>00346         <span class="keywordtype">char</span> *pos;
<a name="l00347"></a>00347 
<a name="l00348"></a>00348         <span class="comment">/* Command line option may contain port number */</span>
<a name="l00349"></a>00349         <span class="keywordflow">if</span> ((pos=pj_strchr(&amp;icedemo.opt.stun_srv, <span class="charliteral">&#39;:&#39;</span>)) != NULL) {
<a name="l00350"></a>00350             icedemo.ice_cfg.stun.server.ptr = icedemo.opt.stun_srv.ptr;
<a name="l00351"></a>00351             icedemo.ice_cfg.stun.server.slen = (pos - icedemo.opt.stun_srv.ptr);
<a name="l00352"></a>00352 
<a name="l00353"></a>00353             icedemo.ice_cfg.stun.port = (pj_uint16_t)atoi(pos+1);
<a name="l00354"></a>00354         } <span class="keywordflow">else</span> {
<a name="l00355"></a>00355             icedemo.ice_cfg.stun.server = icedemo.opt.stun_srv;
<a name="l00356"></a>00356             icedemo.ice_cfg.stun.port = <a class="code" href="group__PJNATH__CONFIG.htm#gaae2a66afe2cdacfd15938675acb8d3c0">PJ_STUN_PORT</a>;
<a name="l00357"></a>00357         }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359         <span class="comment">/* For this demo app, configure longer STUN keep-alive time</span>
<a name="l00360"></a>00360 <span class="comment">         * so that it does&#39;t clutter the screen output.</span>
<a name="l00361"></a>00361 <span class="comment">         */</span>
<a name="l00362"></a>00362         icedemo.ice_cfg.stun.cfg.ka_interval = KA_INTERVAL;
<a name="l00363"></a>00363     }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="comment">/* Configure TURN candidate */</span>
<a name="l00366"></a>00366     <span class="keywordflow">if</span> (icedemo.opt.turn_srv.slen) {
<a name="l00367"></a>00367         <span class="keywordtype">char</span> *pos;
<a name="l00368"></a>00368 
<a name="l00369"></a>00369         <span class="comment">/* Command line option may contain port number */</span>
<a name="l00370"></a>00370         <span class="keywordflow">if</span> ((pos=pj_strchr(&amp;icedemo.opt.turn_srv, <span class="charliteral">&#39;:&#39;</span>)) != NULL) {
<a name="l00371"></a>00371             icedemo.ice_cfg.turn.server.ptr = icedemo.opt.turn_srv.ptr;
<a name="l00372"></a>00372             icedemo.ice_cfg.turn.server.slen = (pos - icedemo.opt.turn_srv.ptr);
<a name="l00373"></a>00373 
<a name="l00374"></a>00374             icedemo.ice_cfg.turn.port = (pj_uint16_t)atoi(pos+1);
<a name="l00375"></a>00375         } <span class="keywordflow">else</span> {
<a name="l00376"></a>00376             icedemo.ice_cfg.turn.server = icedemo.opt.turn_srv;
<a name="l00377"></a>00377             icedemo.ice_cfg.turn.port = <a class="code" href="group__PJNATH__CONFIG.htm#gaae2a66afe2cdacfd15938675acb8d3c0">PJ_STUN_PORT</a>;
<a name="l00378"></a>00378         }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380         <span class="comment">/* TURN credential */</span>
<a name="l00381"></a>00381         icedemo.ice_cfg.turn.auth_cred.type = <a class="code" href="group__PJNATH__STUN__AUTH.htm#gga1cb1133fc704a99147e9e5f0ddf35aa0aa9a8a104d5f97636778fce3e205b3cb6">PJ_STUN_AUTH_CRED_STATIC</a>;
<a name="l00382"></a>00382         icedemo.ice_cfg.turn.auth_cred.data.static_cred.username = icedemo.opt.turn_username;
<a name="l00383"></a>00383         icedemo.ice_cfg.turn.auth_cred.data.static_cred.data_type = <a class="code" href="group__PJNATH__STUN__AUTH.htm#ggab91bef4d8bf966ccd2a48da636206c28af960b65c6b553f433308ab46fe78bc33">PJ_STUN_PASSWD_PLAIN</a>;
<a name="l00384"></a>00384         icedemo.ice_cfg.turn.auth_cred.data.static_cred.data = icedemo.opt.turn_password;
<a name="l00385"></a>00385 
<a name="l00386"></a>00386         <span class="comment">/* Connection type to TURN server */</span>
<a name="l00387"></a>00387         <span class="keywordflow">if</span> (icedemo.opt.turn_tcp)
<a name="l00388"></a>00388             icedemo.ice_cfg.turn.conn_type = <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga0dfed6bb5edc5fe18950a46da5ff591ea060378594a0fcb19a419d3e71614f449">PJ_TURN_TP_TCP</a>;
<a name="l00389"></a>00389         <span class="keywordflow">else</span>
<a name="l00390"></a>00390             icedemo.ice_cfg.turn.conn_type = <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga0dfed6bb5edc5fe18950a46da5ff591ea863d21c16c6678359201dda47a7712d5">PJ_TURN_TP_UDP</a>;
<a name="l00391"></a>00391 
<a name="l00392"></a>00392         <span class="comment">/* For this demo app, configure longer keep-alive time</span>
<a name="l00393"></a>00393 <span class="comment">         * so that it does&#39;t clutter the screen output.</span>
<a name="l00394"></a>00394 <span class="comment">         */</span>
<a name="l00395"></a>00395         icedemo.ice_cfg.turn.alloc_param.ka_interval = KA_INTERVAL;
<a name="l00396"></a>00396     }
<a name="l00397"></a>00397 
<a name="l00398"></a>00398     <span class="comment">/* -= That&#39;s it for now, initialization is complete =- */</span>
<a name="l00399"></a>00399     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00400"></a>00400 }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 <span class="comment">/*</span>
<a name="l00404"></a>00404 <span class="comment"> * Create ICE stream transport instance, invoked from the menu.</span>
<a name="l00405"></a>00405 <span class="comment"> */</span>
<a name="l00406"></a>00406 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_create_instance(<span class="keywordtype">void</span>)
<a name="l00407"></a>00407 {
<a name="l00408"></a>00408     <a class="code" href="structpj__ice__strans__cb.htm">pj_ice_strans_cb</a> icecb;
<a name="l00409"></a>00409     pj_status_t status;
<a name="l00410"></a>00410 
<a name="l00411"></a>00411     <span class="keywordflow">if</span> (icedemo.icest != NULL) {
<a name="l00412"></a>00412         puts(<span class="stringliteral">&quot;ICE instance already created, destroy it first&quot;</span>);
<a name="l00413"></a>00413         <span class="keywordflow">return</span>;
<a name="l00414"></a>00414     }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416     <span class="comment">/* init the callback */</span>
<a name="l00417"></a>00417     pj_bzero(&amp;icecb, <span class="keyword">sizeof</span>(icecb));
<a name="l00418"></a>00418     icecb.<a class="code" href="structpj__ice__strans__cb.htm#abc55e1c61291f2e7a7a43a83596094dc">on_rx_data</a> = cb_on_rx_data;
<a name="l00419"></a>00419     icecb.<a class="code" href="structpj__ice__strans__cb.htm#af5bbfd255183ffe6f08d1adfa2bfe799">on_ice_complete</a> = cb_on_ice_complete;
<a name="l00420"></a>00420 
<a name="l00421"></a>00421     <span class="comment">/* create the instance */</span>
<a name="l00422"></a>00422     status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gad62c480462e6b4267597e623a9a609c2">pj_ice_strans_create</a>(<span class="stringliteral">&quot;icedemo&quot;</span>,                <span class="comment">/* object name  */</span>
<a name="l00423"></a>00423                                 &amp;icedemo.ice_cfg,           <span class="comment">/* settings     */</span>
<a name="l00424"></a>00424                                 icedemo.opt.comp_cnt,       <span class="comment">/* comp_cnt     */</span>
<a name="l00425"></a>00425                                 NULL,                       <span class="comment">/* user data    */</span>
<a name="l00426"></a>00426                                 &amp;icecb,                     <span class="comment">/* callback     */</span>
<a name="l00427"></a>00427                                 &amp;icedemo.icest)             <span class="comment">/* instance ptr */</span>
<a name="l00428"></a>00428                                 ;
<a name="l00429"></a>00429     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00430"></a>00430         icedemo_perror(<span class="stringliteral">&quot;error creating ice&quot;</span>, status);
<a name="l00431"></a>00431     <span class="keywordflow">else</span>
<a name="l00432"></a>00432         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;ICE instance successfully created&quot;</span>));
<a name="l00433"></a>00433 }
<a name="l00434"></a>00434 
<a name="l00435"></a>00435 <span class="comment">/* Utility to nullify parsed remote info */</span>
<a name="l00436"></a>00436 <span class="keyword">static</span> <span class="keywordtype">void</span> reset_rem_info(<span class="keywordtype">void</span>)
<a name="l00437"></a>00437 {
<a name="l00438"></a>00438     pj_bzero(&amp;icedemo.rem, <span class="keyword">sizeof</span>(icedemo.rem));
<a name="l00439"></a>00439 }
<a name="l00440"></a>00440 
<a name="l00441"></a>00441 
<a name="l00442"></a>00442 <span class="comment">/*</span>
<a name="l00443"></a>00443 <span class="comment"> * Destroy ICE stream transport instance, invoked from the menu.</span>
<a name="l00444"></a>00444 <span class="comment"> */</span>
<a name="l00445"></a>00445 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_destroy_instance(<span class="keywordtype">void</span>)
<a name="l00446"></a>00446 {
<a name="l00447"></a>00447     <span class="keywordflow">if</span> (icedemo.icest == NULL) {
<a name="l00448"></a>00448         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE instance, create it first&quot;</span>));
<a name="l00449"></a>00449         <span class="keywordflow">return</span>;
<a name="l00450"></a>00450     }
<a name="l00451"></a>00451 
<a name="l00452"></a>00452     <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga22326f9203e11399f710f46760d4ce8b">pj_ice_strans_destroy</a>(icedemo.icest);
<a name="l00453"></a>00453     icedemo.icest = NULL;
<a name="l00454"></a>00454 
<a name="l00455"></a>00455     reset_rem_info();
<a name="l00456"></a>00456 
<a name="l00457"></a>00457     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;ICE instance destroyed&quot;</span>));
<a name="l00458"></a>00458 }
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 
<a name="l00461"></a>00461 <span class="comment">/*</span>
<a name="l00462"></a>00462 <span class="comment"> * Create ICE session, invoked from the menu.</span>
<a name="l00463"></a>00463 <span class="comment"> */</span>
<a name="l00464"></a>00464 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_init_session(<span class="keywordtype">unsigned</span> rolechar)
<a name="l00465"></a>00465 {
<a name="l00466"></a>00466     <a class="code" href="group__PJNATH__ICE__SESSION.htm#ga1d005022224e45654bcdef0eeafae217">pj_ice_sess_role</a> role = (pj_tolower((pj_uint8_t)rolechar)==<span class="charliteral">&#39;o&#39;</span> ? 
<a name="l00467"></a>00467                                 <a class="code" href="group__PJNATH__ICE__SESSION.htm#gga1d005022224e45654bcdef0eeafae217a5b0145b939df96bee579f4d368203b8c">PJ_ICE_SESS_ROLE_CONTROLLING</a> : 
<a name="l00468"></a>00468                                 <a class="code" href="group__PJNATH__ICE__SESSION.htm#gga1d005022224e45654bcdef0eeafae217adf65b85e5be9f6e1e22aa0e06c64476c">PJ_ICE_SESS_ROLE_CONTROLLED</a>);
<a name="l00469"></a>00469     pj_status_t status;
<a name="l00470"></a>00470 
<a name="l00471"></a>00471     <span class="keywordflow">if</span> (icedemo.icest == NULL) {
<a name="l00472"></a>00472         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE instance, create it first&quot;</span>));
<a name="l00473"></a>00473         <span class="keywordflow">return</span>;
<a name="l00474"></a>00474     }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476     <span class="keywordflow">if</span> (<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga571adc0fcdfd7b9fcb3770b09a57bd0a">pj_ice_strans_has_sess</a>(icedemo.icest)) {
<a name="l00477"></a>00477         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: Session already created&quot;</span>));
<a name="l00478"></a>00478         <span class="keywordflow">return</span>;
<a name="l00479"></a>00479     }
<a name="l00480"></a>00480 
<a name="l00481"></a>00481     status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gabfa6ac93f3f56bab3ea8c357468f0826">pj_ice_strans_init_ice</a>(icedemo.icest, role, NULL, NULL);
<a name="l00482"></a>00482     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00483"></a>00483         icedemo_perror(<span class="stringliteral">&quot;error creating session&quot;</span>, status);
<a name="l00484"></a>00484     <span class="keywordflow">else</span>
<a name="l00485"></a>00485         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;ICE session created&quot;</span>));
<a name="l00486"></a>00486 
<a name="l00487"></a>00487     reset_rem_info();
<a name="l00488"></a>00488 }
<a name="l00489"></a>00489 
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 <span class="comment">/*</span>
<a name="l00492"></a>00492 <span class="comment"> * Stop/destroy ICE session, invoked from the menu.</span>
<a name="l00493"></a>00493 <span class="comment"> */</span>
<a name="l00494"></a>00494 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_stop_session(<span class="keywordtype">void</span>)
<a name="l00495"></a>00495 {
<a name="l00496"></a>00496     pj_status_t status;
<a name="l00497"></a>00497 
<a name="l00498"></a>00498     <span class="keywordflow">if</span> (icedemo.icest == NULL) {
<a name="l00499"></a>00499         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE instance, create it first&quot;</span>));
<a name="l00500"></a>00500         <span class="keywordflow">return</span>;
<a name="l00501"></a>00501     }
<a name="l00502"></a>00502 
<a name="l00503"></a>00503     <span class="keywordflow">if</span> (!<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga571adc0fcdfd7b9fcb3770b09a57bd0a">pj_ice_strans_has_sess</a>(icedemo.icest)) {
<a name="l00504"></a>00504         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE session, initialize first&quot;</span>));
<a name="l00505"></a>00505         <span class="keywordflow">return</span>;
<a name="l00506"></a>00506     }
<a name="l00507"></a>00507 
<a name="l00508"></a>00508     status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gabda546ad9dbc4a53f406c85e157dfe73">pj_ice_strans_stop_ice</a>(icedemo.icest);
<a name="l00509"></a>00509     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00510"></a>00510         icedemo_perror(<span class="stringliteral">&quot;error stopping session&quot;</span>, status);
<a name="l00511"></a>00511     <span class="keywordflow">else</span>
<a name="l00512"></a>00512         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;ICE session stopped&quot;</span>));
<a name="l00513"></a>00513 
<a name="l00514"></a>00514     reset_rem_info();
<a name="l00515"></a>00515 }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 <span class="preprocessor">#define PRINT(...)          \</span>
<a name="l00518"></a>00518 <span class="preprocessor">        printed = pj_ansi_snprintf(p, maxlen - (p-buffer),  \</span>
<a name="l00519"></a>00519 <span class="preprocessor">                                   __VA_ARGS__); \</span>
<a name="l00520"></a>00520 <span class="preprocessor">        if (printed &lt;= 0 || printed &gt;= (int)(maxlen - (p-buffer))) \</span>
<a name="l00521"></a>00521 <span class="preprocessor">            return -PJ_ETOOSMALL; \</span>
<a name="l00522"></a>00522 <span class="preprocessor">        p += printed</span>
<a name="l00523"></a>00523 <span class="preprocessor"></span>
<a name="l00524"></a>00524 
<a name="l00525"></a>00525 <span class="comment">/* Utility to create a=candidate SDP attribute */</span>
<a name="l00526"></a>00526 <span class="keyword">static</span> <span class="keywordtype">int</span> print_cand(<span class="keywordtype">char</span> buffer[], <span class="keywordtype">unsigned</span> maxlen,
<a name="l00527"></a>00527                       <span class="keyword">const</span> <a class="code" href="structpj__ice__sess__cand.htm">pj_ice_sess_cand</a> *cand)
<a name="l00528"></a>00528 {
<a name="l00529"></a>00529     <span class="keywordtype">char</span> ipaddr[PJ_INET6_ADDRSTRLEN];
<a name="l00530"></a>00530     <span class="keywordtype">char</span> *p = buffer;
<a name="l00531"></a>00531     <span class="keywordtype">int</span> printed;
<a name="l00532"></a>00532 
<a name="l00533"></a>00533     PRINT(<span class="stringliteral">&quot;a=candidate:%.*s %u UDP %u %s %u typ &quot;</span>,
<a name="l00534"></a>00534           (<span class="keywordtype">int</span>)cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a4b1f7a7f485dfc77e5ff6eb273bd2966">foundation</a>.slen,
<a name="l00535"></a>00535           cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a4b1f7a7f485dfc77e5ff6eb273bd2966">foundation</a>.ptr,
<a name="l00536"></a>00536           (<span class="keywordtype">unsigned</span>)cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#af22aa0946652c69b0eb86f1103f656f2">comp_id</a>,
<a name="l00537"></a>00537           cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#aca2eacfd1f1b2c0fc530ae19db5ef1c9">prio</a>,
<a name="l00538"></a>00538           pj_sockaddr_print(&amp;cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a341c5038cfc4cf43c1e496b7e66a715b">addr</a>, ipaddr, 
<a name="l00539"></a>00539                             <span class="keyword">sizeof</span>(ipaddr), 0),
<a name="l00540"></a>00540           (<span class="keywordtype">unsigned</span>)pj_sockaddr_get_port(&amp;cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a341c5038cfc4cf43c1e496b7e66a715b">addr</a>));
<a name="l00541"></a>00541 
<a name="l00542"></a>00542     PRINT(<span class="stringliteral">&quot;%s\n&quot;</span>,
<a name="l00543"></a>00543           <a class="code" href="group__PJNATH__ICE__SESSION.htm#ga18fd89ecc361d0d0282b856ef62814c1">pj_ice_get_cand_type_name</a>(cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#aace1febfbcf5a2a43f00c8524e9d8449">type</a>));
<a name="l00544"></a>00544 
<a name="l00545"></a>00545     <span class="keywordflow">if</span> (p == buffer+maxlen)
<a name="l00546"></a>00546         <span class="keywordflow">return</span> -PJ_ETOOSMALL;
<a name="l00547"></a>00547 
<a name="l00548"></a>00548     *p = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00549"></a>00549 
<a name="l00550"></a>00550     <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(p-buffer);
<a name="l00551"></a>00551 }
<a name="l00552"></a>00552 
<a name="l00553"></a>00553 <span class="comment">/* </span>
<a name="l00554"></a>00554 <span class="comment"> * Encode ICE information in SDP.</span>
<a name="l00555"></a>00555 <span class="comment"> */</span>
<a name="l00556"></a>00556 <span class="keyword">static</span> <span class="keywordtype">int</span> encode_session(<span class="keywordtype">char</span> buffer[], <span class="keywordtype">unsigned</span> maxlen)
<a name="l00557"></a>00557 {
<a name="l00558"></a>00558     <span class="keywordtype">char</span> *p = buffer;
<a name="l00559"></a>00559     <span class="keywordtype">unsigned</span> comp;
<a name="l00560"></a>00560     <span class="keywordtype">int</span> printed;
<a name="l00561"></a>00561     pj_str_t local_ufrag, local_pwd;
<a name="l00562"></a>00562     pj_status_t status;
<a name="l00563"></a>00563 
<a name="l00564"></a>00564     <span class="comment">/* Write &quot;dummy&quot; SDP v=, o=, s=, and t= lines */</span>
<a name="l00565"></a>00565     PRINT(<span class="stringliteral">&quot;v=0\no=- 3414953978 3414953978 IN IP4 localhost\ns=ice\nt=0 0\n&quot;</span>);
<a name="l00566"></a>00566 
<a name="l00567"></a>00567     <span class="comment">/* Get ufrag and pwd from current session */</span>
<a name="l00568"></a>00568     <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga6fb7cfdde71523f9fce885fd5cad982d">pj_ice_strans_get_ufrag_pwd</a>(icedemo.icest, &amp;local_ufrag, &amp;local_pwd,
<a name="l00569"></a>00569                                 NULL, NULL);
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     <span class="comment">/* Write the a=ice-ufrag and a=ice-pwd attributes */</span>
<a name="l00572"></a>00572     PRINT(<span class="stringliteral">&quot;a=ice-ufrag:%.*s\na=ice-pwd:%.*s\n&quot;</span>,
<a name="l00573"></a>00573            (<span class="keywordtype">int</span>)local_ufrag.slen,
<a name="l00574"></a>00574            local_ufrag.ptr,
<a name="l00575"></a>00575            (<span class="keywordtype">int</span>)local_pwd.slen,
<a name="l00576"></a>00576            local_pwd.ptr);
<a name="l00577"></a>00577 
<a name="l00578"></a>00578     <span class="comment">/* Write each component */</span>
<a name="l00579"></a>00579     <span class="keywordflow">for</span> (comp=0; comp&lt;icedemo.opt.comp_cnt; ++comp) {
<a name="l00580"></a>00580         <span class="keywordtype">unsigned</span> j, cand_cnt;
<a name="l00581"></a>00581         <a class="code" href="structpj__ice__sess__cand.htm">pj_ice_sess_cand</a> cand[<a class="code" href="group__PJNATH__CONFIG.htm#gaf7cc11a09f459e96122fbba968cbaa4e">PJ_ICE_ST_MAX_CAND</a>];
<a name="l00582"></a>00582         <span class="keywordtype">char</span> ipaddr[PJ_INET6_ADDRSTRLEN];
<a name="l00583"></a>00583 
<a name="l00584"></a>00584         <span class="comment">/* Get default candidate for the component */</span>
<a name="l00585"></a>00585         status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#gaea33988e6b75062d5d23bc1280442b2d">pj_ice_strans_get_def_cand</a>(icedemo.icest, comp+1, &amp;cand[0]);
<a name="l00586"></a>00586         <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00587"></a>00587             <span class="keywordflow">return</span> -status;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589         <span class="comment">/* Write the default address */</span>
<a name="l00590"></a>00590         <span class="keywordflow">if</span> (comp==0) {
<a name="l00591"></a>00591             <span class="comment">/* For component 1, default address is in m= and c= lines */</span>
<a name="l00592"></a>00592             PRINT(<span class="stringliteral">&quot;m=audio %d RTP/AVP 0\n&quot;</span>
<a name="l00593"></a>00593                   <span class="stringliteral">&quot;c=IN IP4 %s\n&quot;</span>,
<a name="l00594"></a>00594                   (<span class="keywordtype">int</span>)pj_sockaddr_get_port(&amp;cand[0].addr),
<a name="l00595"></a>00595                   pj_sockaddr_print(&amp;cand[0].addr, ipaddr,
<a name="l00596"></a>00596                                     <span class="keyword">sizeof</span>(ipaddr), 0));
<a name="l00597"></a>00597         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comp==1) {
<a name="l00598"></a>00598             <span class="comment">/* For component 2, default address is in a=rtcp line */</span>
<a name="l00599"></a>00599             PRINT(<span class="stringliteral">&quot;a=rtcp:%d IN IP4 %s\n&quot;</span>,
<a name="l00600"></a>00600                   (<span class="keywordtype">int</span>)pj_sockaddr_get_port(&amp;cand[0].addr),
<a name="l00601"></a>00601                   pj_sockaddr_print(&amp;cand[0].addr, ipaddr,
<a name="l00602"></a>00602                                     <span class="keyword">sizeof</span>(ipaddr), 0));
<a name="l00603"></a>00603         } <span class="keywordflow">else</span> {
<a name="l00604"></a>00604             <span class="comment">/* For other components, we&#39;ll just invent this.. */</span>
<a name="l00605"></a>00605             PRINT(<span class="stringliteral">&quot;a=Xice-defcand:%d IN IP4 %s\n&quot;</span>,
<a name="l00606"></a>00606                   (<span class="keywordtype">int</span>)pj_sockaddr_get_port(&amp;cand[0].addr),
<a name="l00607"></a>00607                   pj_sockaddr_print(&amp;cand[0].addr, ipaddr,
<a name="l00608"></a>00608                                     <span class="keyword">sizeof</span>(ipaddr), 0));
<a name="l00609"></a>00609         }
<a name="l00610"></a>00610 
<a name="l00611"></a>00611         <span class="comment">/* Enumerate all candidates for this component */</span>
<a name="l00612"></a>00612         cand_cnt = PJ_ARRAY_SIZE(cand);
<a name="l00613"></a>00613         status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga597a3c3493038d8b37ff0a63e8ad93e5">pj_ice_strans_enum_cands</a>(icedemo.icest, comp+1,
<a name="l00614"></a>00614                                           &amp;cand_cnt, cand);
<a name="l00615"></a>00615         <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00616"></a>00616             <span class="keywordflow">return</span> -status;
<a name="l00617"></a>00617 
<a name="l00618"></a>00618         <span class="comment">/* And encode the candidates as SDP */</span>
<a name="l00619"></a>00619         <span class="keywordflow">for</span> (j=0; j&lt;cand_cnt; ++j) {
<a name="l00620"></a>00620             printed = print_cand(p, maxlen - (<span class="keywordtype">unsigned</span>)(p-buffer), &amp;cand[j]);
<a name="l00621"></a>00621             <span class="keywordflow">if</span> (printed &lt; 0)
<a name="l00622"></a>00622                 <span class="keywordflow">return</span> -PJ_ETOOSMALL;
<a name="l00623"></a>00623             p += printed;
<a name="l00624"></a>00624         }
<a name="l00625"></a>00625     }
<a name="l00626"></a>00626 
<a name="l00627"></a>00627     <span class="keywordflow">if</span> (p == buffer+maxlen)
<a name="l00628"></a>00628         <span class="keywordflow">return</span> -PJ_ETOOSMALL;
<a name="l00629"></a>00629 
<a name="l00630"></a>00630     *p = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00631"></a>00631     <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)(p - buffer);
<a name="l00632"></a>00632 }
<a name="l00633"></a>00633 
<a name="l00634"></a>00634 
<a name="l00635"></a>00635 <span class="comment">/*</span>
<a name="l00636"></a>00636 <span class="comment"> * Show information contained in the ICE stream transport. This is</span>
<a name="l00637"></a>00637 <span class="comment"> * invoked from the menu.</span>
<a name="l00638"></a>00638 <span class="comment"> */</span>
<a name="l00639"></a>00639 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_show_ice(<span class="keywordtype">void</span>)
<a name="l00640"></a>00640 {
<a name="l00641"></a>00641     <span class="keyword">static</span> <span class="keywordtype">char</span> buffer[1000];
<a name="l00642"></a>00642     <span class="keywordtype">int</span> len;
<a name="l00643"></a>00643 
<a name="l00644"></a>00644     <span class="keywordflow">if</span> (icedemo.icest == NULL) {
<a name="l00645"></a>00645         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE instance, create it first&quot;</span>));
<a name="l00646"></a>00646         <span class="keywordflow">return</span>;
<a name="l00647"></a>00647     }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649     puts(<span class="stringliteral">&quot;General info&quot;</span>);
<a name="l00650"></a>00650     puts(<span class="stringliteral">&quot;---------------&quot;</span>);
<a name="l00651"></a>00651     printf(<span class="stringliteral">&quot;Component count    : %d\n&quot;</span>, icedemo.opt.comp_cnt);
<a name="l00652"></a>00652     printf(<span class="stringliteral">&quot;Status             : &quot;</span>);
<a name="l00653"></a>00653     <span class="keywordflow">if</span> (<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga11b65e1f87fb358ed896ea0e47e1b267">pj_ice_strans_sess_is_complete</a>(icedemo.icest))
<a name="l00654"></a>00654         puts(<span class="stringliteral">&quot;negotiation complete&quot;</span>);
<a name="l00655"></a>00655     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga24a7c14664b0fa9ba1233c43ae5e17a7">pj_ice_strans_sess_is_running</a>(icedemo.icest))
<a name="l00656"></a>00656         puts(<span class="stringliteral">&quot;negotiation is in progress&quot;</span>);
<a name="l00657"></a>00657     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga571adc0fcdfd7b9fcb3770b09a57bd0a">pj_ice_strans_has_sess</a>(icedemo.icest))
<a name="l00658"></a>00658         puts(<span class="stringliteral">&quot;session ready&quot;</span>);
<a name="l00659"></a>00659     <span class="keywordflow">else</span>
<a name="l00660"></a>00660         puts(<span class="stringliteral">&quot;session not created&quot;</span>);
<a name="l00661"></a>00661 
<a name="l00662"></a>00662     <span class="keywordflow">if</span> (!<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga571adc0fcdfd7b9fcb3770b09a57bd0a">pj_ice_strans_has_sess</a>(icedemo.icest)) {
<a name="l00663"></a>00663         puts(<span class="stringliteral">&quot;Create the session first to see more info&quot;</span>);
<a name="l00664"></a>00664         <span class="keywordflow">return</span>;
<a name="l00665"></a>00665     }
<a name="l00666"></a>00666 
<a name="l00667"></a>00667     printf(<span class="stringliteral">&quot;Negotiated comp_cnt: %d\n&quot;</span>, 
<a name="l00668"></a>00668            <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga73e8b8b0233e6cb47236f2ea1906eba7">pj_ice_strans_get_running_comp_cnt</a>(icedemo.icest));
<a name="l00669"></a>00669     printf(<span class="stringliteral">&quot;Role               : %s\n&quot;</span>,
<a name="l00670"></a>00670            <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga377fb5225d366f5db812a64e58ee99b9">pj_ice_strans_get_role</a>(icedemo.icest)==<a class="code" href="group__PJNATH__ICE__SESSION.htm#gga1d005022224e45654bcdef0eeafae217adf65b85e5be9f6e1e22aa0e06c64476c">PJ_ICE_SESS_ROLE_CONTROLLED</a> ?
<a name="l00671"></a>00671            <span class="stringliteral">&quot;controlled&quot;</span> : <span class="stringliteral">&quot;controlling&quot;</span>);
<a name="l00672"></a>00672 
<a name="l00673"></a>00673     len = encode_session(buffer, <span class="keyword">sizeof</span>(buffer));
<a name="l00674"></a>00674     <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00675"></a>00675         err_exit(<span class="stringliteral">&quot;not enough buffer to show ICE status&quot;</span>, -len);
<a name="l00676"></a>00676 
<a name="l00677"></a>00677     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00678"></a>00678     printf(<span class="stringliteral">&quot;Local SDP (paste this to remote host):\n&quot;</span>
<a name="l00679"></a>00679            <span class="stringliteral">&quot;--------------------------------------\n&quot;</span>
<a name="l00680"></a>00680            <span class="stringliteral">&quot;%s\n&quot;</span>, buffer);
<a name="l00681"></a>00681 
<a name="l00682"></a>00682 
<a name="l00683"></a>00683     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00684"></a>00684     puts(<span class="stringliteral">&quot;Remote info:\n&quot;</span>
<a name="l00685"></a>00685          <span class="stringliteral">&quot;----------------------&quot;</span>);
<a name="l00686"></a>00686     <span class="keywordflow">if</span> (icedemo.rem.cand_cnt==0) {
<a name="l00687"></a>00687         puts(<span class="stringliteral">&quot;No remote info yet&quot;</span>);
<a name="l00688"></a>00688     } <span class="keywordflow">else</span> {
<a name="l00689"></a>00689         <span class="keywordtype">unsigned</span> i;
<a name="l00690"></a>00690 
<a name="l00691"></a>00691         printf(<span class="stringliteral">&quot;Remote ufrag       : %s\n&quot;</span>, icedemo.rem.ufrag);
<a name="l00692"></a>00692         printf(<span class="stringliteral">&quot;Remote password    : %s\n&quot;</span>, icedemo.rem.pwd);
<a name="l00693"></a>00693         printf(<span class="stringliteral">&quot;Remote cand. cnt.  : %d\n&quot;</span>, icedemo.rem.cand_cnt);
<a name="l00694"></a>00694 
<a name="l00695"></a>00695         <span class="keywordflow">for</span> (i=0; i&lt;icedemo.rem.cand_cnt; ++i) {
<a name="l00696"></a>00696             len = print_cand(buffer, <span class="keyword">sizeof</span>(buffer), &amp;icedemo.rem.cand[i]);
<a name="l00697"></a>00697             <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00698"></a>00698                 err_exit(<span class="stringliteral">&quot;not enough buffer to show ICE status&quot;</span>, -len);
<a name="l00699"></a>00699 
<a name="l00700"></a>00700             printf(<span class="stringliteral">&quot;  %s&quot;</span>, buffer);
<a name="l00701"></a>00701         }
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703 }
<a name="l00704"></a>00704 
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 <span class="comment">/*</span>
<a name="l00707"></a>00707 <span class="comment"> * Input and parse SDP from the remote (containing remote&#39;s ICE information) </span>
<a name="l00708"></a>00708 <span class="comment"> * and save it to global variables.</span>
<a name="l00709"></a>00709 <span class="comment"> */</span>
<a name="l00710"></a>00710 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_input_remote(<span class="keywordtype">void</span>)
<a name="l00711"></a>00711 {
<a name="l00712"></a>00712     <span class="keywordtype">char</span> linebuf[80];
<a name="l00713"></a>00713     <span class="keywordtype">unsigned</span> media_cnt = 0;
<a name="l00714"></a>00714     <span class="keywordtype">unsigned</span> comp0_port = 0;
<a name="l00715"></a>00715     <span class="keywordtype">char</span>     comp0_addr[80];
<a name="l00716"></a>00716     pj_bool_t done = PJ_FALSE;
<a name="l00717"></a>00717 
<a name="l00718"></a>00718     puts(<span class="stringliteral">&quot;Paste SDP from remote host, end with empty line&quot;</span>);
<a name="l00719"></a>00719 
<a name="l00720"></a>00720     reset_rem_info();
<a name="l00721"></a>00721 
<a name="l00722"></a>00722     comp0_addr[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00723"></a>00723 
<a name="l00724"></a>00724     <span class="keywordflow">while</span> (!done) {
<a name="l00725"></a>00725         pj_size_t len;
<a name="l00726"></a>00726         <span class="keywordtype">char</span> *line;
<a name="l00727"></a>00727 
<a name="l00728"></a>00728         printf(<span class="stringliteral">&quot;&gt;&quot;</span>);
<a name="l00729"></a>00729         <span class="keywordflow">if</span> (stdout) fflush(stdout);
<a name="l00730"></a>00730 
<a name="l00731"></a>00731         <span class="keywordflow">if</span> (fgets(linebuf, <span class="keyword">sizeof</span>(linebuf), stdin)==NULL)
<a name="l00732"></a>00732             <span class="keywordflow">break</span>;
<a name="l00733"></a>00733 
<a name="l00734"></a>00734         len = strlen(linebuf);
<a name="l00735"></a>00735         <span class="keywordflow">while</span> (len &amp;&amp; (linebuf[len-1] == <span class="charliteral">&#39;\r&#39;</span> || linebuf[len-1] == <span class="charliteral">&#39;\n&#39;</span>))
<a name="l00736"></a>00736             linebuf[--len] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00737"></a>00737 
<a name="l00738"></a>00738         line = linebuf;
<a name="l00739"></a>00739         <span class="keywordflow">while</span> (len &amp;&amp; pj_isspace(*line))
<a name="l00740"></a>00740             ++line, --len;
<a name="l00741"></a>00741 
<a name="l00742"></a>00742         <span class="keywordflow">if</span> (len==0)
<a name="l00743"></a>00743             <span class="keywordflow">break</span>;
<a name="l00744"></a>00744 
<a name="l00745"></a>00745         <span class="comment">/* Ignore subsequent media descriptors */</span>
<a name="l00746"></a>00746         <span class="keywordflow">if</span> (media_cnt &gt; 1)
<a name="l00747"></a>00747             <span class="keywordflow">continue</span>;
<a name="l00748"></a>00748 
<a name="l00749"></a>00749         <span class="keywordflow">switch</span> (line[0]) {
<a name="l00750"></a>00750         <span class="keywordflow">case</span> <span class="charliteral">&#39;m&#39;</span>:
<a name="l00751"></a>00751             {
<a name="l00752"></a>00752                 <span class="keywordtype">int</span> cnt;
<a name="l00753"></a>00753                 <span class="keywordtype">char</span> media[32], portstr[32];
<a name="l00754"></a>00754 
<a name="l00755"></a>00755                 ++media_cnt;
<a name="l00756"></a>00756                 <span class="keywordflow">if</span> (media_cnt &gt; 1) {
<a name="l00757"></a>00757                     puts(<span class="stringliteral">&quot;Media line ignored&quot;</span>);
<a name="l00758"></a>00758                     <span class="keywordflow">break</span>;
<a name="l00759"></a>00759                 }
<a name="l00760"></a>00760 
<a name="l00761"></a>00761                 cnt = sscanf(line+2, <span class="stringliteral">&quot;%s %s RTP/&quot;</span>, media, portstr);
<a name="l00762"></a>00762                 <span class="keywordflow">if</span> (cnt != 2) {
<a name="l00763"></a>00763                     PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error parsing media line&quot;</span>));
<a name="l00764"></a>00764                     <span class="keywordflow">goto</span> on_error;
<a name="l00765"></a>00765                 }
<a name="l00766"></a>00766 
<a name="l00767"></a>00767                 comp0_port = atoi(portstr);
<a name="l00768"></a>00768                 
<a name="l00769"></a>00769             }
<a name="l00770"></a>00770             <span class="keywordflow">break</span>;
<a name="l00771"></a>00771         <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l00772"></a>00772             {
<a name="l00773"></a>00773                 <span class="keywordtype">int</span> cnt;
<a name="l00774"></a>00774                 <span class="keywordtype">char</span> c[32], net[32], ip[80];
<a name="l00775"></a>00775                 
<a name="l00776"></a>00776                 cnt = sscanf(line+2, <span class="stringliteral">&quot;%s %s %s&quot;</span>, c, net, ip);
<a name="l00777"></a>00777                 <span class="keywordflow">if</span> (cnt != 3) {
<a name="l00778"></a>00778                     PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error parsing connection line&quot;</span>));
<a name="l00779"></a>00779                     <span class="keywordflow">goto</span> on_error;
<a name="l00780"></a>00780                 }
<a name="l00781"></a>00781 
<a name="l00782"></a>00782                 strcpy(comp0_addr, ip);
<a name="l00783"></a>00783             }
<a name="l00784"></a>00784             <span class="keywordflow">break</span>;
<a name="l00785"></a>00785         <span class="keywordflow">case</span> <span class="charliteral">&#39;a&#39;</span>:
<a name="l00786"></a>00786             {
<a name="l00787"></a>00787                 <span class="keywordtype">char</span> *attr = strtok(line+2, <span class="stringliteral">&quot;: \t\r\n&quot;</span>);
<a name="l00788"></a>00788                 <span class="keywordflow">if</span> (strcmp(attr, <span class="stringliteral">&quot;ice-ufrag&quot;</span>)==0) {
<a name="l00789"></a>00789                     strcpy(icedemo.rem.ufrag, attr+strlen(attr)+1);
<a name="l00790"></a>00790                 } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(attr, <span class="stringliteral">&quot;ice-pwd&quot;</span>)==0) {
<a name="l00791"></a>00791                     strcpy(icedemo.rem.pwd, attr+strlen(attr)+1);
<a name="l00792"></a>00792                 } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(attr, <span class="stringliteral">&quot;rtcp&quot;</span>)==0) {
<a name="l00793"></a>00793                     <span class="keywordtype">char</span> *val = attr+strlen(attr)+1;
<a name="l00794"></a>00794                     <span class="keywordtype">int</span> af, cnt;
<a name="l00795"></a>00795                     <span class="keywordtype">int</span> port;
<a name="l00796"></a>00796                     <span class="keywordtype">char</span> net[32], ip[64];
<a name="l00797"></a>00797                     pj_str_t tmp_addr;
<a name="l00798"></a>00798                     pj_status_t status;
<a name="l00799"></a>00799 
<a name="l00800"></a>00800                     cnt = sscanf(val, <span class="stringliteral">&quot;%d IN %s %s&quot;</span>, &amp;port, net, ip);
<a name="l00801"></a>00801                     <span class="keywordflow">if</span> (cnt != 3) {
<a name="l00802"></a>00802                         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error parsing rtcp attribute&quot;</span>));
<a name="l00803"></a>00803                         <span class="keywordflow">goto</span> on_error;
<a name="l00804"></a>00804                     }
<a name="l00805"></a>00805 
<a name="l00806"></a>00806                     <span class="keywordflow">if</span> (strchr(ip, <span class="charliteral">&#39;:&#39;</span>))
<a name="l00807"></a>00807                         af = pj_AF_INET6();
<a name="l00808"></a>00808                     <span class="keywordflow">else</span>
<a name="l00809"></a>00809                         af = pj_AF_INET();
<a name="l00810"></a>00810 
<a name="l00811"></a>00811                     pj_sockaddr_init(af, &amp;icedemo.rem.def_addr[1], NULL, 0);
<a name="l00812"></a>00812                     tmp_addr = pj_str(ip);
<a name="l00813"></a>00813                     status = pj_sockaddr_set_str_addr(af, &amp;icedemo.rem.def_addr[1],
<a name="l00814"></a>00814                                                       &amp;tmp_addr);
<a name="l00815"></a>00815                     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00816"></a>00816                         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Invalid IP address&quot;</span>));
<a name="l00817"></a>00817                         <span class="keywordflow">goto</span> on_error;
<a name="l00818"></a>00818                     }
<a name="l00819"></a>00819                     pj_sockaddr_set_port(&amp;icedemo.rem.def_addr[1], (pj_uint16_t)port);
<a name="l00820"></a>00820 
<a name="l00821"></a>00821                 } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(attr, <span class="stringliteral">&quot;candidate&quot;</span>)==0) {
<a name="l00822"></a>00822                     <span class="keywordtype">char</span> *sdpcand = attr+strlen(attr)+1;
<a name="l00823"></a>00823                     <span class="keywordtype">int</span> af, cnt;
<a name="l00824"></a>00824                     <span class="keywordtype">char</span> foundation[32], transport[12], ipaddr[80], type[32];
<a name="l00825"></a>00825                     pj_str_t tmpaddr;
<a name="l00826"></a>00826                     <span class="keywordtype">int</span> comp_id, prio, port;
<a name="l00827"></a>00827                     <a class="code" href="structpj__ice__sess__cand.htm">pj_ice_sess_cand</a> *cand;
<a name="l00828"></a>00828                     pj_status_t status;
<a name="l00829"></a>00829 
<a name="l00830"></a>00830                     cnt = sscanf(sdpcand, <span class="stringliteral">&quot;%s %d %s %d %s %d typ %s&quot;</span>,
<a name="l00831"></a>00831                                  foundation,
<a name="l00832"></a>00832                                  &amp;comp_id,
<a name="l00833"></a>00833                                  transport,
<a name="l00834"></a>00834                                  &amp;prio,
<a name="l00835"></a>00835                                  ipaddr,
<a name="l00836"></a>00836                                  &amp;port,
<a name="l00837"></a>00837                                  type);
<a name="l00838"></a>00838                     <span class="keywordflow">if</span> (cnt != 7) {
<a name="l00839"></a>00839                         PJ_LOG(1, (THIS_FILE, <span class="stringliteral">&quot;error: Invalid ICE candidate line&quot;</span>));
<a name="l00840"></a>00840                         <span class="keywordflow">goto</span> on_error;
<a name="l00841"></a>00841                     }
<a name="l00842"></a>00842 
<a name="l00843"></a>00843                     cand = &amp;icedemo.rem.cand[icedemo.rem.cand_cnt];
<a name="l00844"></a>00844                     pj_bzero(cand, <span class="keyword">sizeof</span>(*cand));
<a name="l00845"></a>00845                     
<a name="l00846"></a>00846                     <span class="keywordflow">if</span> (strcmp(type, <span class="stringliteral">&quot;host&quot;</span>)==0)
<a name="l00847"></a>00847                         cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#aace1febfbcf5a2a43f00c8524e9d8449">type</a> = <a class="code" href="group__PJNATH__ICE__SESSION.htm#ggaf1efc18bd5354bbb7e31f2d538590195ab0d5685346080516dfd851b7d795da4a">PJ_ICE_CAND_TYPE_HOST</a>;
<a name="l00848"></a>00848                     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(type, <span class="stringliteral">&quot;srflx&quot;</span>)==0)
<a name="l00849"></a>00849                         cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#aace1febfbcf5a2a43f00c8524e9d8449">type</a> = <a class="code" href="group__PJNATH__ICE__SESSION.htm#ggaf1efc18bd5354bbb7e31f2d538590195ab1b228669c93311321c56d7ffcd3720a">PJ_ICE_CAND_TYPE_SRFLX</a>;
<a name="l00850"></a>00850                     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(type, <span class="stringliteral">&quot;relay&quot;</span>)==0)
<a name="l00851"></a>00851                         cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#aace1febfbcf5a2a43f00c8524e9d8449">type</a> = <a class="code" href="group__PJNATH__ICE__SESSION.htm#ggaf1efc18bd5354bbb7e31f2d538590195a175a194dc076f6c35fb7cd0a094e7207">PJ_ICE_CAND_TYPE_RELAYED</a>;
<a name="l00852"></a>00852                     <span class="keywordflow">else</span> {
<a name="l00853"></a>00853                         PJ_LOG(1, (THIS_FILE, <span class="stringliteral">&quot;Error: invalid candidate type &#39;%s&#39;&quot;</span>, 
<a name="l00854"></a>00854                                    type));
<a name="l00855"></a>00855                         <span class="keywordflow">goto</span> on_error;
<a name="l00856"></a>00856                     }
<a name="l00857"></a>00857 
<a name="l00858"></a>00858                     cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#af22aa0946652c69b0eb86f1103f656f2">comp_id</a> = (pj_uint8_t)comp_id;
<a name="l00859"></a>00859                     pj_strdup2(icedemo.pool, &amp;cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a4b1f7a7f485dfc77e5ff6eb273bd2966">foundation</a>, foundation);
<a name="l00860"></a>00860                     cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#aca2eacfd1f1b2c0fc530ae19db5ef1c9">prio</a> = prio;
<a name="l00861"></a>00861                     
<a name="l00862"></a>00862                     <span class="keywordflow">if</span> (strchr(ipaddr, <span class="charliteral">&#39;:&#39;</span>))
<a name="l00863"></a>00863                         af = pj_AF_INET6();
<a name="l00864"></a>00864                     <span class="keywordflow">else</span>
<a name="l00865"></a>00865                         af = pj_AF_INET();
<a name="l00866"></a>00866 
<a name="l00867"></a>00867                     tmpaddr = pj_str(ipaddr);
<a name="l00868"></a>00868                     pj_sockaddr_init(af, &amp;cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a341c5038cfc4cf43c1e496b7e66a715b">addr</a>, NULL, 0);
<a name="l00869"></a>00869                     status = pj_sockaddr_set_str_addr(af, &amp;cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a341c5038cfc4cf43c1e496b7e66a715b">addr</a>, &amp;tmpaddr);
<a name="l00870"></a>00870                     <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00871"></a>00871                         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: invalid IP address &#39;%s&#39;&quot;</span>,
<a name="l00872"></a>00872                                   ipaddr));
<a name="l00873"></a>00873                         <span class="keywordflow">goto</span> on_error;
<a name="l00874"></a>00874                     }
<a name="l00875"></a>00875 
<a name="l00876"></a>00876                     pj_sockaddr_set_port(&amp;cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#a341c5038cfc4cf43c1e496b7e66a715b">addr</a>, (pj_uint16_t)port);
<a name="l00877"></a>00877 
<a name="l00878"></a>00878                     ++icedemo.rem.cand_cnt;
<a name="l00879"></a>00879 
<a name="l00880"></a>00880                     <span class="keywordflow">if</span> (cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#af22aa0946652c69b0eb86f1103f656f2">comp_id</a> &gt; icedemo.rem.comp_cnt)
<a name="l00881"></a>00881                         icedemo.rem.comp_cnt = cand-&gt;<a class="code" href="structpj__ice__sess__cand.htm#af22aa0946652c69b0eb86f1103f656f2">comp_id</a>;
<a name="l00882"></a>00882                 }
<a name="l00883"></a>00883             }
<a name="l00884"></a>00884             <span class="keywordflow">break</span>;
<a name="l00885"></a>00885         }
<a name="l00886"></a>00886     }
<a name="l00887"></a>00887 
<a name="l00888"></a>00888     <span class="keywordflow">if</span> (icedemo.rem.cand_cnt==0 ||
<a name="l00889"></a>00889         icedemo.rem.ufrag[0]==0 ||
<a name="l00890"></a>00890         icedemo.rem.pwd[0]==0 ||
<a name="l00891"></a>00891         icedemo.rem.comp_cnt == 0)
<a name="l00892"></a>00892     {
<a name="l00893"></a>00893         PJ_LOG(1, (THIS_FILE, <span class="stringliteral">&quot;Error: not enough info&quot;</span>));
<a name="l00894"></a>00894         <span class="keywordflow">goto</span> on_error;
<a name="l00895"></a>00895     }
<a name="l00896"></a>00896 
<a name="l00897"></a>00897     <span class="keywordflow">if</span> (comp0_port==0 || comp0_addr[0]==<span class="charliteral">&#39;\0&#39;</span>) {
<a name="l00898"></a>00898         PJ_LOG(1, (THIS_FILE, <span class="stringliteral">&quot;Error: default address for component 0 not found&quot;</span>));
<a name="l00899"></a>00899         <span class="keywordflow">goto</span> on_error;
<a name="l00900"></a>00900     } <span class="keywordflow">else</span> {
<a name="l00901"></a>00901         <span class="keywordtype">int</span> af;
<a name="l00902"></a>00902         pj_str_t tmp_addr;
<a name="l00903"></a>00903         pj_status_t status;
<a name="l00904"></a>00904 
<a name="l00905"></a>00905         <span class="keywordflow">if</span> (strchr(comp0_addr, <span class="charliteral">&#39;:&#39;</span>))
<a name="l00906"></a>00906             af = pj_AF_INET6();
<a name="l00907"></a>00907         <span class="keywordflow">else</span>
<a name="l00908"></a>00908             af = pj_AF_INET();
<a name="l00909"></a>00909 
<a name="l00910"></a>00910         pj_sockaddr_init(af, &amp;icedemo.rem.def_addr[0], NULL, 0);
<a name="l00911"></a>00911         tmp_addr = pj_str(comp0_addr);
<a name="l00912"></a>00912         status = pj_sockaddr_set_str_addr(af, &amp;icedemo.rem.def_addr[0],
<a name="l00913"></a>00913                                           &amp;tmp_addr);
<a name="l00914"></a>00914         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00915"></a>00915             PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Invalid IP address in c= line&quot;</span>));
<a name="l00916"></a>00916             <span class="keywordflow">goto</span> on_error;
<a name="l00917"></a>00917         }
<a name="l00918"></a>00918         pj_sockaddr_set_port(&amp;icedemo.rem.def_addr[0], (pj_uint16_t)comp0_port);
<a name="l00919"></a>00919     }
<a name="l00920"></a>00920 
<a name="l00921"></a>00921     PJ_LOG(3, (THIS_FILE, <span class="stringliteral">&quot;Done, %d remote candidate(s) added&quot;</span>, 
<a name="l00922"></a>00922                icedemo.rem.cand_cnt));
<a name="l00923"></a>00923     <span class="keywordflow">return</span>;
<a name="l00924"></a>00924 
<a name="l00925"></a>00925 on_error:
<a name="l00926"></a>00926     reset_rem_info();
<a name="l00927"></a>00927 }
<a name="l00928"></a>00928 
<a name="l00929"></a>00929 
<a name="l00930"></a>00930 <span class="comment">/*</span>
<a name="l00931"></a>00931 <span class="comment"> * Start ICE negotiation! This function is invoked from the menu.</span>
<a name="l00932"></a>00932 <span class="comment"> */</span>
<a name="l00933"></a>00933 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_start_nego(<span class="keywordtype">void</span>)
<a name="l00934"></a>00934 {
<a name="l00935"></a>00935     pj_str_t rufrag, rpwd;
<a name="l00936"></a>00936     pj_status_t status;
<a name="l00937"></a>00937 
<a name="l00938"></a>00938     <span class="keywordflow">if</span> (icedemo.icest == NULL) {
<a name="l00939"></a>00939         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE instance, create it first&quot;</span>));
<a name="l00940"></a>00940         <span class="keywordflow">return</span>;
<a name="l00941"></a>00941     }
<a name="l00942"></a>00942 
<a name="l00943"></a>00943     <span class="keywordflow">if</span> (!<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga571adc0fcdfd7b9fcb3770b09a57bd0a">pj_ice_strans_has_sess</a>(icedemo.icest)) {
<a name="l00944"></a>00944         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE session, initialize first&quot;</span>));
<a name="l00945"></a>00945         <span class="keywordflow">return</span>;
<a name="l00946"></a>00946     }
<a name="l00947"></a>00947 
<a name="l00948"></a>00948     <span class="keywordflow">if</span> (icedemo.rem.cand_cnt == 0) {
<a name="l00949"></a>00949         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No remote info, input remote info first&quot;</span>));
<a name="l00950"></a>00950         <span class="keywordflow">return</span>;
<a name="l00951"></a>00951     }
<a name="l00952"></a>00952 
<a name="l00953"></a>00953     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;Starting ICE negotiation..&quot;</span>));
<a name="l00954"></a>00954 
<a name="l00955"></a>00955     status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga4a60bacfd840e40b5a94c7170c6f4530">pj_ice_strans_start_ice</a>(icedemo.icest, 
<a name="l00956"></a>00956                                      pj_cstr(&amp;rufrag, icedemo.rem.ufrag),
<a name="l00957"></a>00957                                      pj_cstr(&amp;rpwd, icedemo.rem.pwd),
<a name="l00958"></a>00958                                      icedemo.rem.cand_cnt,
<a name="l00959"></a>00959                                      icedemo.rem.cand);
<a name="l00960"></a>00960     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00961"></a>00961         icedemo_perror(<span class="stringliteral">&quot;Error starting ICE&quot;</span>, status);
<a name="l00962"></a>00962     <span class="keywordflow">else</span>
<a name="l00963"></a>00963         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;ICE negotiation started&quot;</span>));
<a name="l00964"></a>00964 }
<a name="l00965"></a>00965 
<a name="l00966"></a>00966 
<a name="l00967"></a>00967 <span class="comment">/*</span>
<a name="l00968"></a>00968 <span class="comment"> * Send application data to remote agent.</span>
<a name="l00969"></a>00969 <span class="comment"> */</span>
<a name="l00970"></a>00970 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_send_data(<span class="keywordtype">unsigned</span> comp_id, <span class="keyword">const</span> <span class="keywordtype">char</span> *data)
<a name="l00971"></a>00971 {
<a name="l00972"></a>00972     pj_status_t status;
<a name="l00973"></a>00973 
<a name="l00974"></a>00974     <span class="keywordflow">if</span> (icedemo.icest == NULL) {
<a name="l00975"></a>00975         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE instance, create it first&quot;</span>));
<a name="l00976"></a>00976         <span class="keywordflow">return</span>;
<a name="l00977"></a>00977     }
<a name="l00978"></a>00978 
<a name="l00979"></a>00979     <span class="keywordflow">if</span> (!<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga571adc0fcdfd7b9fcb3770b09a57bd0a">pj_ice_strans_has_sess</a>(icedemo.icest)) {
<a name="l00980"></a>00980         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: No ICE session, initialize first&quot;</span>));
<a name="l00981"></a>00981         <span class="keywordflow">return</span>;
<a name="l00982"></a>00982     }
<a name="l00983"></a>00983 
<a name="l00984"></a>00984     <span class="comment">/*</span>
<a name="l00985"></a>00985 <span class="comment">    if (!pj_ice_strans_sess_is_complete(icedemo.icest)) {</span>
<a name="l00986"></a>00986 <span class="comment">        PJ_LOG(1,(THIS_FILE, &quot;Error: ICE negotiation has not been started or is in progress&quot;));</span>
<a name="l00987"></a>00987 <span class="comment">        return;</span>
<a name="l00988"></a>00988 <span class="comment">    }</span>
<a name="l00989"></a>00989 <span class="comment">    */</span>
<a name="l00990"></a>00990 
<a name="l00991"></a>00991     <span class="keywordflow">if</span> (comp_id&lt;1||comp_id&gt;<a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga73e8b8b0233e6cb47236f2ea1906eba7">pj_ice_strans_get_running_comp_cnt</a>(icedemo.icest)) {
<a name="l00992"></a>00992         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: invalid component ID&quot;</span>));
<a name="l00993"></a>00993         <span class="keywordflow">return</span>;
<a name="l00994"></a>00994     }
<a name="l00995"></a>00995 
<a name="l00996"></a>00996     status = <a class="code" href="group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga5ce01f1ae17a6ac73afa98c3a3c619df">pj_ice_strans_sendto</a>(icedemo.icest, comp_id, data, strlen(data),
<a name="l00997"></a>00997                                   &amp;icedemo.rem.def_addr[comp_id-1],
<a name="l00998"></a>00998                                   pj_sockaddr_get_len(&amp;icedemo.rem.def_addr[comp_id-1]));
<a name="l00999"></a>00999     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l01000"></a>01000         icedemo_perror(<span class="stringliteral">&quot;Error sending data&quot;</span>, status);
<a name="l01001"></a>01001     <span class="keywordflow">else</span>
<a name="l01002"></a>01002         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;Data sent&quot;</span>));
<a name="l01003"></a>01003 }
<a name="l01004"></a>01004 
<a name="l01005"></a>01005 
<a name="l01006"></a>01006 <span class="comment">/*</span>
<a name="l01007"></a>01007 <span class="comment"> * Display help for the menu.</span>
<a name="l01008"></a>01008 <span class="comment"> */</span>
<a name="l01009"></a>01009 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_help_menu(<span class="keywordtype">void</span>)
<a name="l01010"></a>01010 {
<a name="l01011"></a>01011     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01012"></a>01012     puts(<span class="stringliteral">&quot;-= Help on using ICE and this icedemo program =-&quot;</span>);
<a name="l01013"></a>01013     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01014"></a>01014     puts(<span class="stringliteral">&quot;This application demonstrates how to use ICE in pjnath without having\n&quot;</span>
<a name="l01015"></a>01015          <span class="stringliteral">&quot;to use the SIP protocol. To use this application, you will need to run\n&quot;</span>
<a name="l01016"></a>01016          <span class="stringliteral">&quot;two instances of this application, to simulate two ICE agents.\n&quot;</span>);
<a name="l01017"></a>01017 
<a name="l01018"></a>01018     puts(<span class="stringliteral">&quot;Basic ICE flow:\n&quot;</span>
<a name="l01019"></a>01019          <span class="stringliteral">&quot; create instance [menu \&quot;c\&quot;]\n&quot;</span>
<a name="l01020"></a>01020          <span class="stringliteral">&quot; repeat these steps as wanted:\n&quot;</span>
<a name="l01021"></a>01021          <span class="stringliteral">&quot;   - init session as offerer or answerer [menu \&quot;i\&quot;]\n&quot;</span>
<a name="l01022"></a>01022          <span class="stringliteral">&quot;   - display our SDP [menu \&quot;s\&quot;]\n&quot;</span>
<a name="l01023"></a>01023          <span class="stringliteral">&quot;   - \&quot;send\&quot; our SDP from the \&quot;show\&quot; output above to remote, by\n&quot;</span>
<a name="l01024"></a>01024          <span class="stringliteral">&quot;     copy-pasting the SDP to the other icedemo application\n&quot;</span>
<a name="l01025"></a>01025          <span class="stringliteral">&quot;   - parse remote SDP, by pasting SDP generated by the other icedemo\n&quot;</span>
<a name="l01026"></a>01026          <span class="stringliteral">&quot;     instance [menu \&quot;r\&quot;]\n&quot;</span>
<a name="l01027"></a>01027          <span class="stringliteral">&quot;   - begin ICE negotiation in our end [menu \&quot;b\&quot;], and \n&quot;</span>
<a name="l01028"></a>01028          <span class="stringliteral">&quot;   - immediately begin ICE negotiation in the other icedemo instance\n&quot;</span>
<a name="l01029"></a>01029          <span class="stringliteral">&quot;   - ICE negotiation will run, and result will be printed to screen\n&quot;</span>
<a name="l01030"></a>01030          <span class="stringliteral">&quot;   - send application data to remote [menu \&quot;x\&quot;]\n&quot;</span>
<a name="l01031"></a>01031          <span class="stringliteral">&quot;   - end/stop ICE session [menu \&quot;e\&quot;]\n&quot;</span>
<a name="l01032"></a>01032          <span class="stringliteral">&quot; destroy instance [menu \&quot;d\&quot;]\n&quot;</span>
<a name="l01033"></a>01033          <span class="stringliteral">&quot;&quot;</span>);
<a name="l01034"></a>01034 
<a name="l01035"></a>01035     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01036"></a>01036     puts(<span class="stringliteral">&quot;This concludes the help screen.&quot;</span>);
<a name="l01037"></a>01037     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01038"></a>01038 }
<a name="l01039"></a>01039 
<a name="l01040"></a>01040 
<a name="l01041"></a>01041 <span class="comment">/*</span>
<a name="l01042"></a>01042 <span class="comment"> * Display console menu</span>
<a name="l01043"></a>01043 <span class="comment"> */</span>
<a name="l01044"></a>01044 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_print_menu(<span class="keywordtype">void</span>)
<a name="l01045"></a>01045 {
<a name="l01046"></a>01046     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01047"></a>01047     puts(<span class="stringliteral">&quot;+----------------------------------------------------------------------+&quot;</span>);
<a name="l01048"></a>01048     puts(<span class="stringliteral">&quot;|                    M E N U                                           |&quot;</span>);
<a name="l01049"></a>01049     puts(<span class="stringliteral">&quot;+---+------------------------------------------------------------------+&quot;</span>);
<a name="l01050"></a>01050     puts(<span class="stringliteral">&quot;| c | create           Create the instance                             |&quot;</span>);
<a name="l01051"></a>01051     puts(<span class="stringliteral">&quot;| d | destroy          Destroy the instance                            |&quot;</span>);
<a name="l01052"></a>01052     puts(<span class="stringliteral">&quot;| i | init o|a         Initialize ICE session as offerer or answerer   |&quot;</span>);
<a name="l01053"></a>01053     puts(<span class="stringliteral">&quot;| e | stop             End/stop ICE session                            |&quot;</span>);
<a name="l01054"></a>01054     puts(<span class="stringliteral">&quot;| s | show             Display local ICE info                          |&quot;</span>);
<a name="l01055"></a>01055     puts(<span class="stringliteral">&quot;| r | remote           Input remote ICE info                           |&quot;</span>);
<a name="l01056"></a>01056     puts(<span class="stringliteral">&quot;| b | start            Begin ICE negotiation                           |&quot;</span>);
<a name="l01057"></a>01057     puts(<span class="stringliteral">&quot;| x | send &lt;compid&gt; .. Send data to remote                             |&quot;</span>);
<a name="l01058"></a>01058     puts(<span class="stringliteral">&quot;+---+------------------------------------------------------------------+&quot;</span>);
<a name="l01059"></a>01059     puts(<span class="stringliteral">&quot;| h |  help            * Help! *                                       |&quot;</span>);
<a name="l01060"></a>01060     puts(<span class="stringliteral">&quot;| q |  quit            Quit                                            |&quot;</span>);
<a name="l01061"></a>01061     puts(<span class="stringliteral">&quot;+----------------------------------------------------------------------+&quot;</span>);
<a name="l01062"></a>01062 }
<a name="l01063"></a>01063 
<a name="l01064"></a>01064 
<a name="l01065"></a>01065 <span class="comment">/*</span>
<a name="l01066"></a>01066 <span class="comment"> * Main console loop.</span>
<a name="l01067"></a>01067 <span class="comment"> */</span>
<a name="l01068"></a>01068 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_console(<span class="keywordtype">void</span>)
<a name="l01069"></a>01069 {
<a name="l01070"></a>01070     pj_bool_t app_quit = PJ_FALSE;
<a name="l01071"></a>01071 
<a name="l01072"></a>01072     <span class="keywordflow">while</span> (!app_quit) {
<a name="l01073"></a>01073         <span class="keywordtype">char</span> input[80], *cmd;
<a name="l01074"></a>01074         <span class="keyword">const</span> <span class="keywordtype">char</span> *SEP = <span class="stringliteral">&quot; \t\r\n&quot;</span>;
<a name="l01075"></a>01075         pj_size_t len;
<a name="l01076"></a>01076 
<a name="l01077"></a>01077         icedemo_print_menu();
<a name="l01078"></a>01078 
<a name="l01079"></a>01079         printf(<span class="stringliteral">&quot;Input: &quot;</span>);
<a name="l01080"></a>01080         <span class="keywordflow">if</span> (stdout) fflush(stdout);
<a name="l01081"></a>01081 
<a name="l01082"></a>01082         pj_bzero(input, <span class="keyword">sizeof</span>(input));
<a name="l01083"></a>01083         <span class="keywordflow">if</span> (fgets(input, <span class="keyword">sizeof</span>(input), stdin) == NULL)
<a name="l01084"></a>01084             <span class="keywordflow">break</span>;
<a name="l01085"></a>01085 
<a name="l01086"></a>01086         len = strlen(input);
<a name="l01087"></a>01087         <span class="keywordflow">while</span> (len &amp;&amp; (input[len-1]==<span class="charliteral">&#39;\r&#39;</span> || input[len-1]==<span class="charliteral">&#39;\n&#39;</span>))
<a name="l01088"></a>01088             input[--len] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l01089"></a>01089 
<a name="l01090"></a>01090         cmd = strtok(input, SEP);
<a name="l01091"></a>01091         <span class="keywordflow">if</span> (!cmd)
<a name="l01092"></a>01092             <span class="keywordflow">continue</span>;
<a name="l01093"></a>01093 
<a name="l01094"></a>01094         <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;create&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;c&quot;</span>)==0) {
<a name="l01095"></a>01095 
<a name="l01096"></a>01096             icedemo_create_instance();
<a name="l01097"></a>01097 
<a name="l01098"></a>01098         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;destroy&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;d&quot;</span>)==0) {
<a name="l01099"></a>01099 
<a name="l01100"></a>01100             icedemo_destroy_instance();
<a name="l01101"></a>01101 
<a name="l01102"></a>01102         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;init&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;i&quot;</span>)==0) {
<a name="l01103"></a>01103 
<a name="l01104"></a>01104             <span class="keywordtype">char</span> *role = strtok(NULL, SEP);
<a name="l01105"></a>01105             <span class="keywordflow">if</span> (role)
<a name="l01106"></a>01106                 icedemo_init_session(*role);
<a name="l01107"></a>01107             <span class="keywordflow">else</span>
<a name="l01108"></a>01108                 puts(<span class="stringliteral">&quot;error: Role required&quot;</span>);
<a name="l01109"></a>01109 
<a name="l01110"></a>01110         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;stop&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;e&quot;</span>)==0) {
<a name="l01111"></a>01111 
<a name="l01112"></a>01112             icedemo_stop_session();
<a name="l01113"></a>01113 
<a name="l01114"></a>01114         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;show&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;s&quot;</span>)==0) {
<a name="l01115"></a>01115 
<a name="l01116"></a>01116             icedemo_show_ice();
<a name="l01117"></a>01117 
<a name="l01118"></a>01118         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;remote&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;r&quot;</span>)==0) {
<a name="l01119"></a>01119 
<a name="l01120"></a>01120             icedemo_input_remote();
<a name="l01121"></a>01121 
<a name="l01122"></a>01122         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;start&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;b&quot;</span>)==0) {
<a name="l01123"></a>01123 
<a name="l01124"></a>01124             icedemo_start_nego();
<a name="l01125"></a>01125 
<a name="l01126"></a>01126         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;send&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;x&quot;</span>)==0) {
<a name="l01127"></a>01127 
<a name="l01128"></a>01128             <span class="keywordtype">char</span> *comp = strtok(NULL, SEP);
<a name="l01129"></a>01129 
<a name="l01130"></a>01130             <span class="keywordflow">if</span> (!comp) {
<a name="l01131"></a>01131                 PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error: component ID required&quot;</span>));
<a name="l01132"></a>01132             } <span class="keywordflow">else</span> {
<a name="l01133"></a>01133                 <span class="keywordtype">char</span> *data = comp + strlen(comp) + 1;
<a name="l01134"></a>01134                 <span class="keywordflow">if</span> (!data)
<a name="l01135"></a>01135                     data = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01136"></a>01136                 icedemo_send_data(atoi(comp), data);
<a name="l01137"></a>01137             }
<a name="l01138"></a>01138 
<a name="l01139"></a>01139         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;help&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;h&quot;</span>)==0) {
<a name="l01140"></a>01140 
<a name="l01141"></a>01141             icedemo_help_menu();
<a name="l01142"></a>01142 
<a name="l01143"></a>01143         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp(cmd, <span class="stringliteral">&quot;quit&quot;</span>)==0 || strcmp(cmd, <span class="stringliteral">&quot;q&quot;</span>)==0) {
<a name="l01144"></a>01144 
<a name="l01145"></a>01145             app_quit = PJ_TRUE;
<a name="l01146"></a>01146 
<a name="l01147"></a>01147         } <span class="keywordflow">else</span> {
<a name="l01148"></a>01148 
<a name="l01149"></a>01149             printf(<span class="stringliteral">&quot;Invalid command &#39;%s&#39;\n&quot;</span>, cmd);
<a name="l01150"></a>01150 
<a name="l01151"></a>01151         }
<a name="l01152"></a>01152     }
<a name="l01153"></a>01153 }
<a name="l01154"></a>01154 
<a name="l01155"></a>01155 
<a name="l01156"></a>01156 <span class="comment">/*</span>
<a name="l01157"></a>01157 <span class="comment"> * Display program usage.</span>
<a name="l01158"></a>01158 <span class="comment"> */</span>
<a name="l01159"></a>01159 <span class="keyword">static</span> <span class="keywordtype">void</span> icedemo_usage()
<a name="l01160"></a>01160 {
<a name="l01161"></a>01161     puts(<span class="stringliteral">&quot;Usage: icedemo [optons]&quot;</span>);
<a name="l01162"></a>01162     printf(<span class="stringliteral">&quot;icedemo v%s by pjsip.org\n&quot;</span>, pj_get_version());
<a name="l01163"></a>01163     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01164"></a>01164     puts(<span class="stringliteral">&quot;General options:&quot;</span>);
<a name="l01165"></a>01165     puts(<span class="stringliteral">&quot; --comp-cnt, -c N          Component count (default=1)&quot;</span>);
<a name="l01166"></a>01166     puts(<span class="stringliteral">&quot; --nameserver, -n IP       Configure nameserver to activate DNS SRV&quot;</span>);
<a name="l01167"></a>01167     puts(<span class="stringliteral">&quot;                           resolution&quot;</span>);
<a name="l01168"></a>01168     puts(<span class="stringliteral">&quot; --max-host, -H N          Set max number of host candidates to N&quot;</span>);
<a name="l01169"></a>01169     puts(<span class="stringliteral">&quot; --regular, -R             Use regular nomination (default aggressive)&quot;</span>);
<a name="l01170"></a>01170     puts(<span class="stringliteral">&quot; --log-file, -L FILE       Save output to log FILE&quot;</span>);
<a name="l01171"></a>01171     puts(<span class="stringliteral">&quot; --help, -h                Display this screen.&quot;</span>);
<a name="l01172"></a>01172     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01173"></a>01173     puts(<span class="stringliteral">&quot;STUN related options:&quot;</span>);
<a name="l01174"></a>01174     puts(<span class="stringliteral">&quot; --stun-srv, -s HOSTDOM    Enable srflx candidate by resolving to STUN server.&quot;</span>);
<a name="l01175"></a>01175     puts(<span class="stringliteral">&quot;                           HOSTDOM may be a \&quot;host_or_ip[:port]\&quot; or a domain&quot;</span>);
<a name="l01176"></a>01176     puts(<span class="stringliteral">&quot;                           name if DNS SRV resolution is used.&quot;</span>);
<a name="l01177"></a>01177     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01178"></a>01178     puts(<span class="stringliteral">&quot;TURN related options:&quot;</span>);
<a name="l01179"></a>01179     puts(<span class="stringliteral">&quot; --turn-srv, -t HOSTDOM    Enable relayed candidate by using this TURN server.&quot;</span>);
<a name="l01180"></a>01180     puts(<span class="stringliteral">&quot;                           HOSTDOM may be a \&quot;host_or_ip[:port]\&quot; or a domain&quot;</span>);
<a name="l01181"></a>01181     puts(<span class="stringliteral">&quot;                           name if DNS SRV resolution is used.&quot;</span>);
<a name="l01182"></a>01182     puts(<span class="stringliteral">&quot; --turn-tcp, -T            Use TCP to connect to TURN server&quot;</span>);
<a name="l01183"></a>01183     puts(<span class="stringliteral">&quot; --turn-username, -u UID   Set TURN username of the credential to UID&quot;</span>);
<a name="l01184"></a>01184     puts(<span class="stringliteral">&quot; --turn-password, -p PWD   Set password of the credential to WPWD&quot;</span>);
<a name="l01185"></a>01185     puts(<span class="stringliteral">&quot; --turn-fingerprint, -F    Use fingerprint for outgoing TURN requests&quot;</span>);
<a name="l01186"></a>01186     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l01187"></a>01187 }
<a name="l01188"></a>01188 
<a name="l01189"></a>01189 
<a name="l01190"></a>01190 <span class="comment">/*</span>
<a name="l01191"></a>01191 <span class="comment"> * And here&#39;s the main()</span>
<a name="l01192"></a>01192 <span class="comment"> */</span>
<a name="l01193"></a>01193 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l01194"></a>01194 {
<a name="l01195"></a>01195     <span class="keyword">struct </span>pj_getopt_option long_options[] = {
<a name="l01196"></a>01196         { <span class="stringliteral">&quot;comp-cnt&quot;</span>,           1, 0, <span class="charliteral">&#39;c&#39;</span>},
<a name="l01197"></a>01197         { <span class="stringliteral">&quot;nameserver&quot;</span>,         1, 0, <span class="charliteral">&#39;n&#39;</span>},
<a name="l01198"></a>01198         { <span class="stringliteral">&quot;max-host&quot;</span>,           1, 0, <span class="charliteral">&#39;H&#39;</span>},
<a name="l01199"></a>01199         { <span class="stringliteral">&quot;help&quot;</span>,               0, 0, <span class="charliteral">&#39;h&#39;</span>},
<a name="l01200"></a>01200         { <span class="stringliteral">&quot;stun-srv&quot;</span>,           1, 0, <span class="charliteral">&#39;s&#39;</span>},
<a name="l01201"></a>01201         { <span class="stringliteral">&quot;turn-srv&quot;</span>,           1, 0, <span class="charliteral">&#39;t&#39;</span>},
<a name="l01202"></a>01202         { <span class="stringliteral">&quot;turn-tcp&quot;</span>,           0, 0, <span class="charliteral">&#39;T&#39;</span>},
<a name="l01203"></a>01203         { <span class="stringliteral">&quot;turn-username&quot;</span>,      1, 0, <span class="charliteral">&#39;u&#39;</span>},
<a name="l01204"></a>01204         { <span class="stringliteral">&quot;turn-password&quot;</span>,      1, 0, <span class="charliteral">&#39;p&#39;</span>},
<a name="l01205"></a>01205         { <span class="stringliteral">&quot;turn-fingerprint&quot;</span>,   0, 0, <span class="charliteral">&#39;F&#39;</span>},
<a name="l01206"></a>01206         { <span class="stringliteral">&quot;regular&quot;</span>,            0, 0, <span class="charliteral">&#39;R&#39;</span>},
<a name="l01207"></a>01207         { <span class="stringliteral">&quot;log-file&quot;</span>,           1, 0, <span class="charliteral">&#39;L&#39;</span>},
<a name="l01208"></a>01208     };
<a name="l01209"></a>01209     <span class="keywordtype">int</span> c, opt_id;
<a name="l01210"></a>01210     pj_status_t status;
<a name="l01211"></a>01211 
<a name="l01212"></a>01212     icedemo.opt.comp_cnt = 1;
<a name="l01213"></a>01213     icedemo.opt.max_host = -1;
<a name="l01214"></a>01214 
<a name="l01215"></a>01215     <span class="keywordflow">while</span>((c=pj_getopt_long(argc,argv, <span class="stringliteral">&quot;c:n:s:t:u:p:H:L:hTFR&quot;</span>, long_options, &amp;opt_id))!=-1) {
<a name="l01216"></a>01216         <span class="keywordflow">switch</span> (c) {
<a name="l01217"></a>01217         <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l01218"></a>01218             icedemo.opt.comp_cnt = atoi(pj_optarg);
<a name="l01219"></a>01219             <span class="keywordflow">if</span> (icedemo.opt.comp_cnt &lt; 1 || icedemo.opt.comp_cnt &gt;= <a class="code" href="group__PJNATH__CONFIG.htm#gae190e71cca70f0039cc321746186a609">PJ_ICE_MAX_COMP</a>) {
<a name="l01220"></a>01220                 puts(<span class="stringliteral">&quot;Invalid component count value&quot;</span>);
<a name="l01221"></a>01221                 <span class="keywordflow">return</span> 1;
<a name="l01222"></a>01222             }
<a name="l01223"></a>01223             <span class="keywordflow">break</span>;
<a name="l01224"></a>01224         <span class="keywordflow">case</span> <span class="charliteral">&#39;n&#39;</span>:
<a name="l01225"></a>01225             icedemo.opt.ns = pj_str(pj_optarg);
<a name="l01226"></a>01226             <span class="keywordflow">break</span>;
<a name="l01227"></a>01227         <span class="keywordflow">case</span> <span class="charliteral">&#39;H&#39;</span>:
<a name="l01228"></a>01228             icedemo.opt.max_host = atoi(pj_optarg);
<a name="l01229"></a>01229             <span class="keywordflow">break</span>;
<a name="l01230"></a>01230         <span class="keywordflow">case</span> <span class="charliteral">&#39;h&#39;</span>:
<a name="l01231"></a>01231             icedemo_usage();
<a name="l01232"></a>01232             <span class="keywordflow">return</span> 0;
<a name="l01233"></a>01233         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l01234"></a>01234             icedemo.opt.stun_srv = pj_str(pj_optarg);
<a name="l01235"></a>01235             <span class="keywordflow">break</span>;
<a name="l01236"></a>01236         <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
<a name="l01237"></a>01237             icedemo.opt.turn_srv = pj_str(pj_optarg);
<a name="l01238"></a>01238             <span class="keywordflow">break</span>;
<a name="l01239"></a>01239         <span class="keywordflow">case</span> <span class="charliteral">&#39;T&#39;</span>:
<a name="l01240"></a>01240             icedemo.opt.turn_tcp = PJ_TRUE;
<a name="l01241"></a>01241             <span class="keywordflow">break</span>;
<a name="l01242"></a>01242         <span class="keywordflow">case</span> <span class="charliteral">&#39;u&#39;</span>:
<a name="l01243"></a>01243             icedemo.opt.turn_username = pj_str(pj_optarg);
<a name="l01244"></a>01244             <span class="keywordflow">break</span>;
<a name="l01245"></a>01245         <span class="keywordflow">case</span> <span class="charliteral">&#39;p&#39;</span>:
<a name="l01246"></a>01246             icedemo.opt.turn_password = pj_str(pj_optarg);
<a name="l01247"></a>01247             <span class="keywordflow">break</span>;
<a name="l01248"></a>01248         <span class="keywordflow">case</span> <span class="charliteral">&#39;F&#39;</span>:
<a name="l01249"></a>01249             icedemo.opt.turn_fingerprint = PJ_TRUE;
<a name="l01250"></a>01250             <span class="keywordflow">break</span>;
<a name="l01251"></a>01251         <span class="keywordflow">case</span> <span class="charliteral">&#39;R&#39;</span>:
<a name="l01252"></a>01252             icedemo.opt.regular = PJ_TRUE;
<a name="l01253"></a>01253             <span class="keywordflow">break</span>;
<a name="l01254"></a>01254         <span class="keywordflow">case</span> <span class="charliteral">&#39;L&#39;</span>:
<a name="l01255"></a>01255             icedemo.opt.log_file = pj_optarg;
<a name="l01256"></a>01256             <span class="keywordflow">break</span>;
<a name="l01257"></a>01257         <span class="keywordflow">default</span>:
<a name="l01258"></a>01258             printf(<span class="stringliteral">&quot;Argument \&quot;%s\&quot; is not valid. Use -h to see help&quot;</span>,
<a name="l01259"></a>01259                    argv[pj_optind]);
<a name="l01260"></a>01260             <span class="keywordflow">return</span> 1;
<a name="l01261"></a>01261         }
<a name="l01262"></a>01262     }
<a name="l01263"></a>01263 
<a name="l01264"></a>01264     status = icedemo_init();
<a name="l01265"></a>01265     <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l01266"></a>01266         <span class="keywordflow">return</span> 1;
<a name="l01267"></a>01267 
<a name="l01268"></a>01268     icedemo_console();
<a name="l01269"></a>01269 
<a name="l01270"></a>01270     err_exit(<span class="stringliteral">&quot;Quitting..&quot;</span>, PJ_SUCCESS);
<a name="l01271"></a>01271     <span class="keywordflow">return</span> 0;
<a name="l01272"></a>01272 }
</pre></div><p>. </p>
</div></div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
