<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>pjturn-client, a sample TURN client (2.4)</title>
<link href="/style/style.css" rel="stylesheet" type="text/css">
</head><body>
	<!--#include virtual="/header.html" -->
	<TABLE border=0 width="90%"><TR><TD>
	<p><A HREF="/">Home</A> --&gt; <A HREF="/docs.htm">Documentations</A> --&gt; <A HREF="/pjnath/docs/html/index.htm">PJNATH Reference</A></p>


<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">pjturn-client, a sample TURN client </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This is a simple, interactive TURN client application, with the following features:</p>
<ul>
<li>DNS SRV resolution</li>
<li>TCP connection to TURN server</li>
<li>Optional fingerprint</li>
</ul>
<p>This file is pjnath/src/pjturn-client/client_main.c.</p>
<p>Screenshot on WinXP: </p>
<div class="image">
<img src="pjturn_client.jpg" alt="pjturn_client.jpg"/>
<div class="caption">
pjturn_client on WinXP</div></div>
 <div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id: client_main.c 3553 2011-05-05 06:14:19Z nanang $ */</span>
<a name="l00002"></a>00002 <span class="comment">/* </span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2003-2008 Benny Prijono &lt;benny@prijono.org&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00009"></a>00009 <span class="comment"> * (at your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA </span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;pjnath.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;pjlib-util.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;pjlib.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#define THIS_FILE       &quot;client_main.c&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define LOCAL_PORT      1998</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define BANDWIDTH       64                  </span><span class="comment">/* -1 to disable */</span>
<a name="l00028"></a>00028 <span class="preprocessor">#define LIFETIME        600                 </span><span class="comment">/* -1 to disable */</span>
<a name="l00029"></a>00029 <span class="preprocessor">#define REQ_TRANSPORT   -1                  </span><span class="comment">/* 0: udp, 1: tcp, -1: disable */</span>
<a name="l00030"></a>00030 <span class="preprocessor">#define REQ_PORT_PROPS  -1                  </span><span class="comment">/* -1 to disable */</span>
<a name="l00031"></a>00031 <span class="preprocessor">#define REQ_IP          0                   </span><span class="comment">/* IP address string */</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">//#define OPTIONS               PJ_STUN_NO_AUTHENTICATE</span>
<a name="l00034"></a>00034 <span class="preprocessor">#define OPTIONS         0</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">struct </span>peer
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039     <a class="code" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a>   *stun_sock;
<a name="l00040"></a>00040     pj_sockaddr     mapped_addr;
<a name="l00041"></a>00041 };
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">static</span> <span class="keyword">struct </span>global
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046     pj_caching_pool      cp;
<a name="l00047"></a>00047     pj_pool_t           *pool;
<a name="l00048"></a>00048     <a class="code" href="structpj__stun__config.htm">pj_stun_config</a>       stun_config;
<a name="l00049"></a>00049     pj_thread_t         *thread;
<a name="l00050"></a>00050     pj_bool_t            quit;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     pj_dns_resolver     *resolver;
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a>        *relay;
<a name="l00055"></a>00055     pj_sockaddr          relay_addr;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057     <span class="keyword">struct </span>peer          peer[2];
<a name="l00058"></a>00058 } g;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="keyword">static</span> <span class="keyword">struct </span>options
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062     pj_bool_t    use_tcp;
<a name="l00063"></a>00063     <span class="keywordtype">char</span>        *srv_addr;
<a name="l00064"></a>00064     <span class="keywordtype">char</span>        *srv_port;
<a name="l00065"></a>00065     <span class="keywordtype">char</span>        *realm;
<a name="l00066"></a>00066     <span class="keywordtype">char</span>        *user_name;
<a name="l00067"></a>00067     <span class="keywordtype">char</span>        *password;
<a name="l00068"></a>00068     pj_bool_t    use_fingerprint;
<a name="l00069"></a>00069     <span class="keywordtype">char</span>        *stun_server;
<a name="l00070"></a>00070     <span class="keywordtype">char</span>        *nameserver;
<a name="l00071"></a>00071 } o;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="keyword">static</span> <span class="keywordtype">int</span> worker_thread(<span class="keywordtype">void</span> *unused);
<a name="l00075"></a>00075 <span class="keyword">static</span> <span class="keywordtype">void</span> turn_on_rx_data(<a class="code" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *relay,
<a name="l00076"></a>00076                             <span class="keywordtype">void</span> *pkt,
<a name="l00077"></a>00077                             <span class="keywordtype">unsigned</span> pkt_len,
<a name="l00078"></a>00078                             <span class="keyword">const</span> pj_sockaddr_t *peer_addr,
<a name="l00079"></a>00079                             <span class="keywordtype">unsigned</span> addr_len);
<a name="l00080"></a>00080 <span class="keyword">static</span> <span class="keywordtype">void</span> turn_on_state(<a class="code" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *relay, <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> old_state,
<a name="l00081"></a>00081                           <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> new_state);
<a name="l00082"></a>00082 <span class="keyword">static</span> pj_bool_t stun_sock_on_status(<a class="code" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, 
<a name="l00083"></a>00083                                      <a class="code" href="group__PJNATH__STUN__SOCK.htm#gae063dc49f90e760f150785b67407341b">pj_stun_sock_op</a> op,
<a name="l00084"></a>00084                                      pj_status_t status);
<a name="l00085"></a>00085 <span class="keyword">static</span> pj_bool_t stun_sock_on_rx_data(<a class="code" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock,
<a name="l00086"></a>00086                                       <span class="keywordtype">void</span> *pkt,
<a name="l00087"></a>00087                                       <span class="keywordtype">unsigned</span> pkt_len,
<a name="l00088"></a>00088                                       <span class="keyword">const</span> pj_sockaddr_t *src_addr,
<a name="l00089"></a>00089                                       <span class="keywordtype">unsigned</span> addr_len);
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="keyword">static</span> <span class="keywordtype">void</span> my_perror(<span class="keyword">const</span> <span class="keywordtype">char</span> *title, pj_status_t status)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094     <span class="keywordtype">char</span> errmsg[PJ_ERR_MSG_SIZE];
<a name="l00095"></a>00095     pj_strerror(status, errmsg, <span class="keyword">sizeof</span>(errmsg));
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;%s: %s&quot;</span>, title, errmsg));
<a name="l00098"></a>00098 }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="preprocessor">#define CHECK(expr)     status=expr; \</span>
<a name="l00101"></a>00101 <span class="preprocessor">                        if (status!=PJ_SUCCESS) { \</span>
<a name="l00102"></a>00102 <span class="preprocessor">                            my_perror(#expr, status); \</span>
<a name="l00103"></a>00103 <span class="preprocessor">                            return status; \</span>
<a name="l00104"></a>00104 <span class="preprocessor">                        }</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>
<a name="l00106"></a>00106 <span class="keyword">static</span> <span class="keywordtype">int</span> init()
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108     <span class="keywordtype">int</span> i;
<a name="l00109"></a>00109     pj_status_t status;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     CHECK( pj_init() );
<a name="l00112"></a>00112     CHECK( pjlib_util_init() );
<a name="l00113"></a>00113     CHECK( <a class="code" href="group__PJNATH.htm#gae0efc3dd76da8e22cc5f6fcdd632426b">pjnath_init</a>() );
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="comment">/* Check that server is specified */</span>
<a name="l00116"></a>00116     <span class="keywordflow">if</span> (!o.srv_addr) {
<a name="l00117"></a>00117         printf(<span class="stringliteral">&quot;Error: server must be specified\n&quot;</span>);
<a name="l00118"></a>00118         <span class="keywordflow">return</span> PJ_EINVAL;
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121     pj_caching_pool_init(&amp;g.cp, &amp;pj_pool_factory_default_policy, 0);
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     g.pool = pj_pool_create(&amp;g.cp.factory, <span class="stringliteral">&quot;main&quot;</span>, 1000, 1000, NULL);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     <span class="comment">/* Init global STUN config */</span>
<a name="l00126"></a>00126     <a class="code" href="group__PJNATH__STUN__CONFIG.htm#ga2654ee0038afad692906dd3de4745052">pj_stun_config_init</a>(&amp;g.stun_config, &amp;g.cp.factory, 0, NULL, NULL);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="comment">/* Create global timer heap */</span>
<a name="l00129"></a>00129     CHECK( pj_timer_heap_create(g.pool, 1000, &amp;g.stun_config.timer_heap) );
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">/* Create global ioqueue */</span>
<a name="l00132"></a>00132     CHECK( pj_ioqueue_create(g.pool, 16, &amp;g.stun_config.ioqueue) );
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="comment">/* </span>
<a name="l00135"></a>00135 <span class="comment">     * Create peers</span>
<a name="l00136"></a>00136 <span class="comment">     */</span>
<a name="l00137"></a>00137     <span class="keywordflow">for</span> (i=0; i&lt;(int)PJ_ARRAY_SIZE(g.peer); ++i) {
<a name="l00138"></a>00138         <a class="code" href="structpj__stun__sock__cb.htm">pj_stun_sock_cb</a> stun_sock_cb;
<a name="l00139"></a>00139         <span class="keywordtype">char</span> name[] = <span class="stringliteral">&quot;peer0&quot;</span>;
<a name="l00140"></a>00140         pj_uint16_t port;
<a name="l00141"></a>00141         <a class="code" href="structpj__stun__sock__cfg.htm">pj_stun_sock_cfg</a> ss_cfg;
<a name="l00142"></a>00142         pj_str_t server;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144         pj_bzero(&amp;stun_sock_cb, <span class="keyword">sizeof</span>(stun_sock_cb));
<a name="l00145"></a>00145         stun_sock_cb.<a class="code" href="structpj__stun__sock__cb.htm#a663e1e797036811b2af847f712b6b0ce">on_rx_data</a> = &amp;stun_sock_on_rx_data;
<a name="l00146"></a>00146         stun_sock_cb.<a class="code" href="structpj__stun__sock__cb.htm#a273b59b9da60a629bf1362e29e592033">on_status</a> = &amp;stun_sock_on_status;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         g.peer[i].mapped_addr.addr.sa_family = pj_AF_INET();
<a name="l00149"></a>00149 
<a name="l00150"></a>00150         <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga35ddfbdad31fb56cf2e136722c3a0530">pj_stun_sock_cfg_default</a>(&amp;ss_cfg);
<a name="l00151"></a>00151 <span class="preprocessor">#if 1</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span>        <span class="comment">/* make reading the log easier */</span>
<a name="l00153"></a>00153         ss_cfg.<a class="code" href="structpj__stun__sock__cfg.htm#a8536072aa40597249261362f82eb4f59">ka_interval</a> = 300;
<a name="l00154"></a>00154 <span class="preprocessor">#endif</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>
<a name="l00156"></a>00156         name[strlen(name)-1] = <span class="charliteral">&#39;0&#39;</span>+i;
<a name="l00157"></a>00157         status = <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga2bdf2dc635cb5bd59e4860a2f19a6611">pj_stun_sock_create</a>(&amp;g.stun_config, name, pj_AF_INET(), 
<a name="l00158"></a>00158                                      &amp;stun_sock_cb, &amp;ss_cfg,
<a name="l00159"></a>00159                                      &amp;g.peer[i], &amp;g.peer[i].stun_sock);
<a name="l00160"></a>00160         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00161"></a>00161             my_perror(<span class="stringliteral">&quot;pj_stun_sock_create()&quot;</span>, status);
<a name="l00162"></a>00162             <span class="keywordflow">return</span> status;
<a name="l00163"></a>00163         }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165         <span class="keywordflow">if</span> (o.stun_server) {
<a name="l00166"></a>00166             server = pj_str(o.stun_server);
<a name="l00167"></a>00167             port = <a class="code" href="group__PJNATH__CONFIG.htm#gaae2a66afe2cdacfd15938675acb8d3c0">PJ_STUN_PORT</a>;
<a name="l00168"></a>00168         } <span class="keywordflow">else</span> {
<a name="l00169"></a>00169             server = pj_str(o.srv_addr);
<a name="l00170"></a>00170             port = (pj_uint16_t)(o.srv_port?atoi(o.srv_port):<a class="code" href="group__PJNATH__CONFIG.htm#gaae2a66afe2cdacfd15938675acb8d3c0">PJ_STUN_PORT</a>);
<a name="l00171"></a>00171         }
<a name="l00172"></a>00172         status = <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga8497322d8467614089b91ea712d67bf0">pj_stun_sock_start</a>(g.peer[i].stun_sock, &amp;server, 
<a name="l00173"></a>00173                                     port,  NULL);
<a name="l00174"></a>00174         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00175"></a>00175             my_perror(<span class="stringliteral">&quot;pj_stun_sock_start()&quot;</span>, status);
<a name="l00176"></a>00176             <span class="keywordflow">return</span> status;
<a name="l00177"></a>00177         }
<a name="l00178"></a>00178     }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180     <span class="comment">/* Start the worker thread */</span>
<a name="l00181"></a>00181     CHECK( pj_thread_create(g.pool, <span class="stringliteral">&quot;stun&quot;</span>, &amp;worker_thread, NULL, 0, 0, &amp;g.thread) );
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="keyword">static</span> <span class="keywordtype">int</span> client_shutdown()
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190     <span class="keywordtype">unsigned</span> i;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192     <span class="keywordflow">if</span> (g.thread) {
<a name="l00193"></a>00193         g.quit = 1;
<a name="l00194"></a>00194         pj_thread_join(g.thread);
<a name="l00195"></a>00195         pj_thread_destroy(g.thread);
<a name="l00196"></a>00196         g.thread = NULL;
<a name="l00197"></a>00197     }
<a name="l00198"></a>00198     <span class="keywordflow">if</span> (g.relay) {
<a name="l00199"></a>00199         <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga811bad900993b99b22df6673c067d2da">pj_turn_sock_destroy</a>(g.relay);
<a name="l00200"></a>00200         g.relay = NULL;
<a name="l00201"></a>00201     }
<a name="l00202"></a>00202     <span class="keywordflow">for</span> (i=0; i&lt;PJ_ARRAY_SIZE(g.peer); ++i) {
<a name="l00203"></a>00203         <span class="keywordflow">if</span> (g.peer[i].stun_sock) {
<a name="l00204"></a>00204             <a class="code" href="group__PJNATH__STUN__SOCK.htm#gad58f8a7d91dd6a2df3aaae9a88050ef9">pj_stun_sock_destroy</a>(g.peer[i].stun_sock);
<a name="l00205"></a>00205             g.peer[i].stun_sock = NULL;
<a name="l00206"></a>00206         }
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208     <span class="keywordflow">if</span> (g.stun_config.timer_heap) {
<a name="l00209"></a>00209         pj_timer_heap_destroy(g.stun_config.timer_heap);
<a name="l00210"></a>00210         g.stun_config.timer_heap = NULL;
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212     <span class="keywordflow">if</span> (g.stun_config.ioqueue) {
<a name="l00213"></a>00213         pj_ioqueue_destroy(g.stun_config.ioqueue);
<a name="l00214"></a>00214         g.stun_config.ioqueue = NULL;
<a name="l00215"></a>00215     }
<a name="l00216"></a>00216     <span class="keywordflow">if</span> (g.pool) {
<a name="l00217"></a>00217         pj_pool_release(g.pool);
<a name="l00218"></a>00218         g.pool = NULL;
<a name="l00219"></a>00219     }
<a name="l00220"></a>00220     pj_pool_factory_dump(&amp;g.cp.factory, PJ_TRUE);
<a name="l00221"></a>00221     pj_caching_pool_destroy(&amp;g.cp);
<a name="l00222"></a>00222 
<a name="l00223"></a>00223     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00224"></a>00224 }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="keyword">static</span> <span class="keywordtype">int</span> worker_thread(<span class="keywordtype">void</span> *unused)
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229     PJ_UNUSED_ARG(unused);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231     <span class="keywordflow">while</span> (!g.quit) {
<a name="l00232"></a>00232         <span class="keyword">const</span> pj_time_val delay = {0, 10};
<a name="l00233"></a>00233 
<a name="l00234"></a>00234         <span class="comment">/* Poll ioqueue for the TURN client */</span>
<a name="l00235"></a>00235         pj_ioqueue_poll(g.stun_config.ioqueue, &amp;delay);
<a name="l00236"></a>00236 
<a name="l00237"></a>00237         <span class="comment">/* Poll the timer heap */</span>
<a name="l00238"></a>00238         pj_timer_heap_poll(g.stun_config.timer_heap, NULL);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     <span class="keywordflow">return</span> 0;
<a name="l00243"></a>00243 }
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 <span class="keyword">static</span> pj_status_t create_relay(<span class="keywordtype">void</span>)
<a name="l00246"></a>00246 {
<a name="l00247"></a>00247     <a class="code" href="structpj__turn__sock__cb.htm">pj_turn_sock_cb</a> rel_cb;
<a name="l00248"></a>00248     <a class="code" href="structpj__stun__auth__cred.htm">pj_stun_auth_cred</a> cred;
<a name="l00249"></a>00249     pj_str_t srv;
<a name="l00250"></a>00250     pj_status_t status;
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="keywordflow">if</span> (g.relay) {
<a name="l00253"></a>00253         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Relay already created&quot;</span>));
<a name="l00254"></a>00254         <span class="keywordflow">return</span> -1;
<a name="l00255"></a>00255     }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257     <span class="comment">/* Create DNS resolver if configured */</span>
<a name="l00258"></a>00258     <span class="keywordflow">if</span> (o.nameserver) {
<a name="l00259"></a>00259         pj_str_t ns = pj_str(o.nameserver);
<a name="l00260"></a>00260 
<a name="l00261"></a>00261         status = pj_dns_resolver_create(&amp;g.cp.factory, <span class="stringliteral">&quot;resolver&quot;</span>, 0, 
<a name="l00262"></a>00262                                         g.stun_config.timer_heap, 
<a name="l00263"></a>00263                                         g.stun_config.ioqueue, &amp;g.resolver);
<a name="l00264"></a>00264         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00265"></a>00265             PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error creating resolver (err=%d)&quot;</span>, status));
<a name="l00266"></a>00266             <span class="keywordflow">return</span> status;
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         status = pj_dns_resolver_set_ns(g.resolver, 1, &amp;ns, NULL);
<a name="l00270"></a>00270         <span class="keywordflow">if</span> (status != PJ_SUCCESS) {
<a name="l00271"></a>00271             PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;Error configuring nameserver (err=%d)&quot;</span>, status));
<a name="l00272"></a>00272             <span class="keywordflow">return</span> status;
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274     }
<a name="l00275"></a>00275 
<a name="l00276"></a>00276     pj_bzero(&amp;rel_cb, <span class="keyword">sizeof</span>(rel_cb));
<a name="l00277"></a>00277     rel_cb.<a class="code" href="structpj__turn__sock__cb.htm#a945c61c314943761edf9d4fcd4372f72">on_rx_data</a> = &amp;turn_on_rx_data;
<a name="l00278"></a>00278     rel_cb.<a class="code" href="structpj__turn__sock__cb.htm#acc29e4536856058ee32832e9aa673d25">on_state</a> = &amp;turn_on_state;
<a name="l00279"></a>00279     CHECK( <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga3f738f3ed4b1c2a218fe00025bee90fa">pj_turn_sock_create</a>(&amp;g.stun_config, pj_AF_INET(), 
<a name="l00280"></a>00280                                (o.use_tcp? <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga0dfed6bb5edc5fe18950a46da5ff591ea060378594a0fcb19a419d3e71614f449">PJ_TURN_TP_TCP</a> : <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga0dfed6bb5edc5fe18950a46da5ff591ea863d21c16c6678359201dda47a7712d5">PJ_TURN_TP_UDP</a>),
<a name="l00281"></a>00281                                &amp;rel_cb, 0,
<a name="l00282"></a>00282                                NULL, &amp;g.relay) );
<a name="l00283"></a>00283 
<a name="l00284"></a>00284     <span class="keywordflow">if</span> (o.user_name) {
<a name="l00285"></a>00285         pj_bzero(&amp;cred, <span class="keyword">sizeof</span>(cred));
<a name="l00286"></a>00286         cred.<a class="code" href="structpj__stun__auth__cred.htm#a5bc84463a3fb3a4fb9a18ba32afdd47f">type</a> = <a class="code" href="group__PJNATH__STUN__AUTH.htm#gga1cb1133fc704a99147e9e5f0ddf35aa0aa9a8a104d5f97636778fce3e205b3cb6">PJ_STUN_AUTH_CRED_STATIC</a>;
<a name="l00287"></a>00287         cred.<a class="code" href="structpj__stun__auth__cred.htm#a8745afb5a6e8304906343ca6660fbba5">data</a>.static_cred.realm = pj_str(o.realm);
<a name="l00288"></a>00288         cred.<a class="code" href="structpj__stun__auth__cred.htm#a8745afb5a6e8304906343ca6660fbba5">data</a>.static_cred.username = pj_str(o.user_name);
<a name="l00289"></a>00289         cred.<a class="code" href="structpj__stun__auth__cred.htm#a8745afb5a6e8304906343ca6660fbba5">data</a>.static_cred.data_type = <a class="code" href="group__PJNATH__STUN__AUTH.htm#ggab91bef4d8bf966ccd2a48da636206c28af960b65c6b553f433308ab46fe78bc33">PJ_STUN_PASSWD_PLAIN</a>;
<a name="l00290"></a>00290         cred.<a class="code" href="structpj__stun__auth__cred.htm#a8745afb5a6e8304906343ca6660fbba5">data</a>.static_cred.data = pj_str(o.password);
<a name="l00291"></a>00291         <span class="comment">//cred.data.static_cred.nonce = pj_str(o.nonce);</span>
<a name="l00292"></a>00292     } <span class="keywordflow">else</span> {
<a name="l00293"></a>00293         PJ_LOG(2,(THIS_FILE, <span class="stringliteral">&quot;Warning: no credential is set&quot;</span>));
<a name="l00294"></a>00294     }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     srv = pj_str(o.srv_addr);
<a name="l00297"></a>00297     CHECK(<a class="code" href="group__PJNATH__TURN__SOCK.htm#gac9c675afdfb03b1e6dec315ce0acbbfc">pj_turn_sock_alloc</a>(g.relay,                            <span class="comment">/* the relay */</span>
<a name="l00298"></a>00298                             &amp;srv,                                <span class="comment">/* srv addr */</span>
<a name="l00299"></a>00299                             (o.srv_port?atoi(o.srv_port):<a class="code" href="group__PJNATH__CONFIG.htm#gaae2a66afe2cdacfd15938675acb8d3c0">PJ_STUN_PORT</a>),<span class="comment">/* def port */</span>
<a name="l00300"></a>00300                             g.resolver,                          <span class="comment">/* resolver */</span>
<a name="l00301"></a>00301                             (o.user_name?&amp;cred:NULL),            <span class="comment">/* credential */</span>
<a name="l00302"></a>00302                             NULL)                                <span class="comment">/* alloc param */</span>
<a name="l00303"></a>00303                             );
<a name="l00304"></a>00304 
<a name="l00305"></a>00305     <span class="keywordflow">return</span> PJ_SUCCESS;
<a name="l00306"></a>00306 }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="keyword">static</span> <span class="keywordtype">void</span> destroy_relay(<span class="keywordtype">void</span>)
<a name="l00309"></a>00309 {
<a name="l00310"></a>00310     <span class="keywordflow">if</span> (g.relay) {
<a name="l00311"></a>00311         <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga811bad900993b99b22df6673c067d2da">pj_turn_sock_destroy</a>(g.relay);
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313 }
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 <span class="keyword">static</span> <span class="keywordtype">void</span> turn_on_rx_data(<a class="code" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *relay,
<a name="l00317"></a>00317                             <span class="keywordtype">void</span> *pkt,
<a name="l00318"></a>00318                             <span class="keywordtype">unsigned</span> pkt_len,
<a name="l00319"></a>00319                             <span class="keyword">const</span> pj_sockaddr_t *peer_addr,
<a name="l00320"></a>00320                             <span class="keywordtype">unsigned</span> addr_len)
<a name="l00321"></a>00321 {
<a name="l00322"></a>00322     <span class="keywordtype">char</span> addrinfo[80];
<a name="l00323"></a>00323 
<a name="l00324"></a>00324     pj_sockaddr_print(peer_addr, addrinfo, <span class="keyword">sizeof</span>(addrinfo), 3);
<a name="l00325"></a>00325 
<a name="l00326"></a>00326     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;Client received %d bytes data from %s: %.*s&quot;</span>,
<a name="l00327"></a>00327               pkt_len, addrinfo, pkt_len, pkt));
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 <span class="keyword">static</span> <span class="keywordtype">void</span> turn_on_state(<a class="code" href="group__PJNATH__TURN__SOCK.htm#ga1464ed784633ea88e143db46fe9e51c5">pj_turn_sock</a> *relay, <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> old_state,
<a name="l00332"></a>00332                           <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga763f751e1663de5a61b9e9013541530d">pj_turn_state_t</a> new_state)
<a name="l00333"></a>00333 {
<a name="l00334"></a>00334     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;State %s --&gt; %s&quot;</span>, <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga9f1e11aa8d185d8c383b64fcbd24ce95">pj_turn_state_name</a>(old_state), 
<a name="l00335"></a>00335               <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga9f1e11aa8d185d8c383b64fcbd24ce95">pj_turn_state_name</a>(new_state)));
<a name="l00336"></a>00336 
<a name="l00337"></a>00337     <span class="keywordflow">if</span> (new_state == <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga763f751e1663de5a61b9e9013541530da9d5c96a0383c6401ec06596a6df50a04">PJ_TURN_STATE_READY</a>) {
<a name="l00338"></a>00338         <a class="code" href="structpj__turn__session__info.htm">pj_turn_session_info</a> info;
<a name="l00339"></a>00339         <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga9ea749b81cc851ec0b9fa44ffe14ab8e">pj_turn_sock_get_info</a>(relay, &amp;info);
<a name="l00340"></a>00340         pj_memcpy(&amp;g.relay_addr, &amp;info.<a class="code" href="structpj__turn__session__info.htm#af49951f201f105c543009b363f38feac">relay_addr</a>, <span class="keyword">sizeof</span>(pj_sockaddr));
<a name="l00341"></a>00341     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (new_state &gt; <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga763f751e1663de5a61b9e9013541530da9d5c96a0383c6401ec06596a6df50a04">PJ_TURN_STATE_READY</a> &amp;&amp; g.relay) {
<a name="l00342"></a>00342         PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;Relay shutting down..&quot;</span>));
<a name="l00343"></a>00343         g.relay = NULL;
<a name="l00344"></a>00344     }
<a name="l00345"></a>00345 }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 <span class="keyword">static</span> pj_bool_t stun_sock_on_status(<a class="code" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock, 
<a name="l00348"></a>00348                                      <a class="code" href="group__PJNATH__STUN__SOCK.htm#gae063dc49f90e760f150785b67407341b">pj_stun_sock_op</a> op,
<a name="l00349"></a>00349                                      pj_status_t status)
<a name="l00350"></a>00350 {
<a name="l00351"></a>00351     <span class="keyword">struct </span>peer *peer = (<span class="keyword">struct </span>peer*) <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga9baefba513aa1c17cfe8c34d0ec7bfff">pj_stun_sock_get_user_data</a>(stun_sock);
<a name="l00352"></a>00352 
<a name="l00353"></a>00353     <span class="keywordflow">if</span> (status == PJ_SUCCESS) {
<a name="l00354"></a>00354         PJ_LOG(4,(THIS_FILE, <span class="stringliteral">&quot;peer%d: %s success&quot;</span>, peer-g.peer,
<a name="l00355"></a>00355                   <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga1d58f1d753e51c2440b95aad690f30ae">pj_stun_sock_op_name</a>(op)));
<a name="l00356"></a>00356     } <span class="keywordflow">else</span> {
<a name="l00357"></a>00357         <span class="keywordtype">char</span> errmsg[PJ_ERR_MSG_SIZE];
<a name="l00358"></a>00358         pj_strerror(status, errmsg, <span class="keyword">sizeof</span>(errmsg));
<a name="l00359"></a>00359         PJ_LOG(1,(THIS_FILE, <span class="stringliteral">&quot;peer%d: %s error: %s&quot;</span>, peer-g.peer,
<a name="l00360"></a>00360                   <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga1d58f1d753e51c2440b95aad690f30ae">pj_stun_sock_op_name</a>(op), errmsg));
<a name="l00361"></a>00361         <span class="keywordflow">return</span> PJ_FALSE;
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364     <span class="keywordflow">if</span> (op==<a class="code" href="group__PJNATH__STUN__SOCK.htm#ggae063dc49f90e760f150785b67407341bad5d8ad3ab9e604e1d27b999e056b483d">PJ_STUN_SOCK_BINDING_OP</a> || op==<a class="code" href="group__PJNATH__STUN__SOCK.htm#ggae063dc49f90e760f150785b67407341ba9712eb5343be397005a55d8ffdd2fb0b">PJ_STUN_SOCK_KEEP_ALIVE_OP</a>) {
<a name="l00365"></a>00365         <a class="code" href="structpj__stun__sock__info.htm">pj_stun_sock_info</a> info;
<a name="l00366"></a>00366         <span class="keywordtype">int</span> cmp;
<a name="l00367"></a>00367 
<a name="l00368"></a>00368         <a class="code" href="group__PJNATH__STUN__SOCK.htm#gaa49347bd571d86ee780a0ba9f634ebfe">pj_stun_sock_get_info</a>(stun_sock, &amp;info);
<a name="l00369"></a>00369         cmp = pj_sockaddr_cmp(&amp;info.<a class="code" href="structpj__stun__sock__info.htm#ac29c7904ae49f12bcaedcf3da5a67ab8">mapped_addr</a>, &amp;peer-&gt;mapped_addr);
<a name="l00370"></a>00370 
<a name="l00371"></a>00371         <span class="keywordflow">if</span> (cmp) {
<a name="l00372"></a>00372             <span class="keywordtype">char</span> straddr[PJ_INET6_ADDRSTRLEN+10];
<a name="l00373"></a>00373 
<a name="l00374"></a>00374             pj_sockaddr_cp(&amp;peer-&gt;mapped_addr, &amp;info.<a class="code" href="structpj__stun__sock__info.htm#ac29c7904ae49f12bcaedcf3da5a67ab8">mapped_addr</a>);
<a name="l00375"></a>00375             pj_sockaddr_print(&amp;peer-&gt;mapped_addr, straddr, <span class="keyword">sizeof</span>(straddr), 3);
<a name="l00376"></a>00376             PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;peer%d: STUN mapped address is %s&quot;</span>,
<a name="l00377"></a>00377                       peer-g.peer, straddr));
<a name="l00378"></a>00378         }
<a name="l00379"></a>00379     }
<a name="l00380"></a>00380 
<a name="l00381"></a>00381     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00382"></a>00382 }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384 <span class="keyword">static</span> pj_bool_t stun_sock_on_rx_data(<a class="code" href="group__PJNATH__STUN__SOCK.htm#gae0a67f4de992eb435dcc8da574b73781">pj_stun_sock</a> *stun_sock,
<a name="l00385"></a>00385                                       <span class="keywordtype">void</span> *pkt,
<a name="l00386"></a>00386                                       <span class="keywordtype">unsigned</span> pkt_len,
<a name="l00387"></a>00387                                       <span class="keyword">const</span> pj_sockaddr_t *src_addr,
<a name="l00388"></a>00388                                       <span class="keywordtype">unsigned</span> addr_len)
<a name="l00389"></a>00389 {
<a name="l00390"></a>00390     <span class="keyword">struct </span>peer *peer = (<span class="keyword">struct </span>peer*) <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga9baefba513aa1c17cfe8c34d0ec7bfff">pj_stun_sock_get_user_data</a>(stun_sock);
<a name="l00391"></a>00391     <span class="keywordtype">char</span> straddr[PJ_INET6_ADDRSTRLEN+10];
<a name="l00392"></a>00392 
<a name="l00393"></a>00393     ((<span class="keywordtype">char</span>*)pkt)[pkt_len] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00394"></a>00394 
<a name="l00395"></a>00395     pj_sockaddr_print(src_addr, straddr, <span class="keyword">sizeof</span>(straddr), 3);
<a name="l00396"></a>00396     PJ_LOG(3,(THIS_FILE, <span class="stringliteral">&quot;peer%d: received %d bytes data from %s: %s&quot;</span>,
<a name="l00397"></a>00397               peer-g.peer, pkt_len, straddr, (<span class="keywordtype">char</span>*)pkt));
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     <span class="keywordflow">return</span> PJ_TRUE;
<a name="l00400"></a>00400 }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 <span class="keyword">static</span> <span class="keywordtype">void</span> menu(<span class="keywordtype">void</span>)
<a name="l00404"></a>00404 {
<a name="l00405"></a>00405     <a class="code" href="structpj__turn__session__info.htm">pj_turn_session_info</a> info;
<a name="l00406"></a>00406     <span class="keywordtype">char</span> client_state[20], relay_addr[80], peer0_addr[80], peer1_addr[80];
<a name="l00407"></a>00407 
<a name="l00408"></a>00408     <span class="keywordflow">if</span> (g.relay) {
<a name="l00409"></a>00409         <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga9ea749b81cc851ec0b9fa44ffe14ab8e">pj_turn_sock_get_info</a>(g.relay, &amp;info);
<a name="l00410"></a>00410         strcpy(client_state, <a class="code" href="group__PJNATH__TURN__SESSION.htm#ga9f1e11aa8d185d8c383b64fcbd24ce95">pj_turn_state_name</a>(info.<a class="code" href="structpj__turn__session__info.htm#afa117cb9c0943b0680481e878b1e7925">state</a>));
<a name="l00411"></a>00411         <span class="keywordflow">if</span> (info.<a class="code" href="structpj__turn__session__info.htm#afa117cb9c0943b0680481e878b1e7925">state</a> &gt;= <a class="code" href="group__PJNATH__TURN__SESSION.htm#gga763f751e1663de5a61b9e9013541530da9d5c96a0383c6401ec06596a6df50a04">PJ_TURN_STATE_READY</a>)
<a name="l00412"></a>00412             pj_sockaddr_print(&amp;info.<a class="code" href="structpj__turn__session__info.htm#af49951f201f105c543009b363f38feac">relay_addr</a>, relay_addr, <span class="keyword">sizeof</span>(relay_addr), 3);
<a name="l00413"></a>00413         <span class="keywordflow">else</span>
<a name="l00414"></a>00414             strcpy(relay_addr, <span class="stringliteral">&quot;0.0.0.0:0&quot;</span>);
<a name="l00415"></a>00415     } <span class="keywordflow">else</span> {
<a name="l00416"></a>00416         strcpy(client_state, <span class="stringliteral">&quot;NULL&quot;</span>);
<a name="l00417"></a>00417         strcpy(relay_addr, <span class="stringliteral">&quot;0.0.0.0:0&quot;</span>);
<a name="l00418"></a>00418     }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     pj_sockaddr_print(&amp;g.peer[0].mapped_addr, peer0_addr, <span class="keyword">sizeof</span>(peer0_addr), 3);
<a name="l00421"></a>00421     pj_sockaddr_print(&amp;g.peer[1].mapped_addr, peer1_addr, <span class="keyword">sizeof</span>(peer1_addr), 3);
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 
<a name="l00424"></a>00424     puts(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00425"></a>00425     puts(<span class="stringliteral">&quot;+=====================================================================+&quot;</span>);
<a name="l00426"></a>00426     puts(<span class="stringliteral">&quot;|             CLIENT                 |             PEER-0             |&quot;</span>);
<a name="l00427"></a>00427     puts(<span class="stringliteral">&quot;|                                    |                                |&quot;</span>);
<a name="l00428"></a>00428     printf(<span class="stringliteral">&quot;| State     : %-12s           | Address: %-21s |\n&quot;</span>,
<a name="l00429"></a>00429            client_state, peer0_addr);
<a name="l00430"></a>00430     printf(<span class="stringliteral">&quot;| Relay addr: %-21s  |                                |\n&quot;</span>,
<a name="l00431"></a>00431            relay_addr);
<a name="l00432"></a>00432     puts(<span class="stringliteral">&quot;|                                    | 0  Send data to relay address  |&quot;</span>);
<a name="l00433"></a>00433     puts(<span class="stringliteral">&quot;| a      Allocate relay              |                                |&quot;</span>);
<a name="l00434"></a>00434     puts(<span class="stringliteral">&quot;| p,pp   Set permission for peer 0/1 +--------------------------------+&quot;</span>);
<a name="l00435"></a>00435     puts(<span class="stringliteral">&quot;| s,ss   Send data to peer 0/1       |             PEER-1             |&quot;</span>);
<a name="l00436"></a>00436     puts(<span class="stringliteral">&quot;| b,bb   BindChannel to peer 0/1     |                                |&quot;</span>);
<a name="l00437"></a>00437     printf(<span class="stringliteral">&quot;| x      Delete allocation           | Address: %-21s |\n&quot;</span>,
<a name="l00438"></a>00438           peer1_addr);
<a name="l00439"></a>00439     puts(<span class="stringliteral">&quot;+------------------------------------+                                |&quot;</span>);
<a name="l00440"></a>00440     puts(<span class="stringliteral">&quot;| q  Quit                  d  Dump   | 1  Send data to relay adderss  |&quot;</span>);
<a name="l00441"></a>00441     puts(<span class="stringliteral">&quot;+------------------------------------+--------------------------------+&quot;</span>);
<a name="l00442"></a>00442     printf(<span class="stringliteral">&quot;&gt;&gt;&gt; &quot;</span>);
<a name="l00443"></a>00443     fflush(stdout);
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 <span class="keyword">static</span> <span class="keywordtype">void</span> console_main(<span class="keywordtype">void</span>)
<a name="l00448"></a>00448 {
<a name="l00449"></a>00449     <span class="keywordflow">while</span> (!g.quit) {
<a name="l00450"></a>00450         <span class="keywordtype">char</span> input[32];
<a name="l00451"></a>00451         <span class="keyword">struct </span>peer *peer;
<a name="l00452"></a>00452         pj_status_t status;
<a name="l00453"></a>00453 
<a name="l00454"></a>00454         menu();
<a name="l00455"></a>00455 
<a name="l00456"></a>00456         <span class="keywordflow">if</span> (fgets(input, <span class="keyword">sizeof</span>(input), stdin) == NULL)
<a name="l00457"></a>00457             <span class="keywordflow">break</span>;
<a name="l00458"></a>00458         
<a name="l00459"></a>00459         <span class="keywordflow">switch</span> (input[0]) {
<a name="l00460"></a>00460         <span class="keywordflow">case</span> <span class="charliteral">&#39;a&#39;</span>:
<a name="l00461"></a>00461             create_relay();
<a name="l00462"></a>00462             <span class="keywordflow">break</span>;
<a name="l00463"></a>00463         <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:
<a name="l00464"></a>00464             pj_pool_factory_dump(&amp;g.cp.factory, PJ_TRUE);
<a name="l00465"></a>00465             <span class="keywordflow">break</span>;
<a name="l00466"></a>00466         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l00467"></a>00467             <span class="keywordflow">if</span> (g.relay == NULL) {
<a name="l00468"></a>00468                 puts(<span class="stringliteral">&quot;Error: no relay&quot;</span>);
<a name="l00469"></a>00469                 <span class="keywordflow">continue</span>;
<a name="l00470"></a>00470             }
<a name="l00471"></a>00471             <span class="keywordflow">if</span> (input[1]!=<span class="charliteral">&#39;s&#39;</span>)
<a name="l00472"></a>00472                 peer = &amp;g.peer[0];
<a name="l00473"></a>00473             <span class="keywordflow">else</span>
<a name="l00474"></a>00474                 peer = &amp;g.peer[1];
<a name="l00475"></a>00475 
<a name="l00476"></a>00476             strcpy(input, <span class="stringliteral">&quot;Hello from client&quot;</span>);
<a name="l00477"></a>00477             status = <a class="code" href="group__PJNATH__TURN__SOCK.htm#gafe879e8db226a75a039eb5360d09d2cb">pj_turn_sock_sendto</a>(g.relay, (<span class="keyword">const</span> pj_uint8_t*)input, 
<a name="l00478"></a>00478                                         strlen(input)+1, 
<a name="l00479"></a>00479                                         &amp;peer-&gt;mapped_addr, 
<a name="l00480"></a>00480                                         pj_sockaddr_get_len(&amp;peer-&gt;mapped_addr));
<a name="l00481"></a>00481             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00482"></a>00482                 my_perror(<span class="stringliteral">&quot;turn_udp_sendto() failed&quot;</span>, status);
<a name="l00483"></a>00483             <span class="keywordflow">break</span>;
<a name="l00484"></a>00484         <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>:
<a name="l00485"></a>00485             <span class="keywordflow">if</span> (g.relay == NULL) {
<a name="l00486"></a>00486                 puts(<span class="stringliteral">&quot;Error: no relay&quot;</span>);
<a name="l00487"></a>00487                 <span class="keywordflow">continue</span>;
<a name="l00488"></a>00488             }
<a name="l00489"></a>00489             <span class="keywordflow">if</span> (input[1]!=<span class="charliteral">&#39;b&#39;</span>)
<a name="l00490"></a>00490                 peer = &amp;g.peer[0];
<a name="l00491"></a>00491             <span class="keywordflow">else</span>
<a name="l00492"></a>00492                 peer = &amp;g.peer[1];
<a name="l00493"></a>00493 
<a name="l00494"></a>00494             status = <a class="code" href="group__PJNATH__TURN__SOCK.htm#ga7b315df95936322a222d91156fa61623">pj_turn_sock_bind_channel</a>(g.relay, &amp;peer-&gt;mapped_addr,
<a name="l00495"></a>00495                                               pj_sockaddr_get_len(&amp;peer-&gt;mapped_addr));
<a name="l00496"></a>00496             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00497"></a>00497                 my_perror(<span class="stringliteral">&quot;turn_udp_bind_channel() failed&quot;</span>, status);
<a name="l00498"></a>00498             <span class="keywordflow">break</span>;
<a name="l00499"></a>00499         <span class="keywordflow">case</span> <span class="charliteral">&#39;p&#39;</span>:
<a name="l00500"></a>00500             <span class="keywordflow">if</span> (g.relay == NULL) {
<a name="l00501"></a>00501                 puts(<span class="stringliteral">&quot;Error: no relay&quot;</span>);
<a name="l00502"></a>00502                 <span class="keywordflow">continue</span>;
<a name="l00503"></a>00503             }
<a name="l00504"></a>00504             <span class="keywordflow">if</span> (input[1]!=<span class="charliteral">&#39;p&#39;</span>)
<a name="l00505"></a>00505                 peer = &amp;g.peer[0];
<a name="l00506"></a>00506             <span class="keywordflow">else</span>
<a name="l00507"></a>00507                 peer = &amp;g.peer[1];
<a name="l00508"></a>00508 
<a name="l00509"></a>00509             status = <a class="code" href="group__PJNATH__TURN__SOCK.htm#gae6b5794a40423d42d4657541d371584f">pj_turn_sock_set_perm</a>(g.relay, 1, &amp;peer-&gt;mapped_addr, 1);
<a name="l00510"></a>00510             <span class="keywordflow">if</span> (status != PJ_SUCCESS)
<a name="l00511"></a>00511                 my_perror(<span class="stringliteral">&quot;pj_turn_sock_set_perm() failed&quot;</span>, status);
<a name="l00512"></a>00512             <span class="keywordflow">break</span>;
<a name="l00513"></a>00513         <span class="keywordflow">case</span> <span class="charliteral">&#39;x&#39;</span>:
<a name="l00514"></a>00514             <span class="keywordflow">if</span> (g.relay == NULL) {
<a name="l00515"></a>00515                 puts(<span class="stringliteral">&quot;Error: no relay&quot;</span>);
<a name="l00516"></a>00516                 <span class="keywordflow">continue</span>;
<a name="l00517"></a>00517             }
<a name="l00518"></a>00518             destroy_relay();
<a name="l00519"></a>00519             <span class="keywordflow">break</span>;
<a name="l00520"></a>00520         <span class="keywordflow">case</span> <span class="charliteral">&#39;0&#39;</span>:
<a name="l00521"></a>00521         <span class="keywordflow">case</span> <span class="charliteral">&#39;1&#39;</span>:
<a name="l00522"></a>00522             <span class="keywordflow">if</span> (g.relay == NULL) {
<a name="l00523"></a>00523                 puts(<span class="stringliteral">&quot;No relay&quot;</span>);
<a name="l00524"></a>00524                 <span class="keywordflow">break</span>;
<a name="l00525"></a>00525             }
<a name="l00526"></a>00526             peer = &amp;g.peer[input[0]-<span class="charliteral">&#39;0&#39;</span>];
<a name="l00527"></a>00527             sprintf(input, <span class="stringliteral">&quot;Hello from peer%d&quot;</span>, input[0]-<span class="charliteral">&#39;0&#39;</span>);
<a name="l00528"></a>00528             <a class="code" href="group__PJNATH__STUN__SOCK.htm#ga7b1ad63c5e8a8f0fa5667d2eb3b9e81a">pj_stun_sock_sendto</a>(peer-&gt;stun_sock, NULL, input, strlen(input)+1, 0,
<a name="l00529"></a>00529                                 &amp;g.relay_addr, pj_sockaddr_get_len(&amp;g.relay_addr));
<a name="l00530"></a>00530             <span class="keywordflow">break</span>;
<a name="l00531"></a>00531         <span class="keywordflow">case</span> <span class="charliteral">&#39;q&#39;</span>:
<a name="l00532"></a>00532             g.quit = PJ_TRUE;
<a name="l00533"></a>00533             <span class="keywordflow">break</span>;
<a name="l00534"></a>00534         }
<a name="l00535"></a>00535     }
<a name="l00536"></a>00536 }
<a name="l00537"></a>00537 
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 <span class="keyword">static</span> <span class="keywordtype">void</span> usage(<span class="keywordtype">void</span>)
<a name="l00540"></a>00540 {
<a name="l00541"></a>00541     puts(<span class="stringliteral">&quot;Usage: pjturn_client TURN-SERVER [OPTIONS]&quot;</span>);
<a name="l00542"></a>00542     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00543"></a>00543     puts(<span class="stringliteral">&quot;where TURN-SERVER is \&quot;host[:port]\&quot;&quot;</span>);
<a name="l00544"></a>00544     puts(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00545"></a>00545     puts(<span class="stringliteral">&quot;and OPTIONS:&quot;</span>);
<a name="l00546"></a>00546     puts(<span class="stringliteral">&quot; --tcp, -T             Use TCP to connect to TURN server&quot;</span>);
<a name="l00547"></a>00547     puts(<span class="stringliteral">&quot; --realm, -r REALM     Set realm of the credential to REALM&quot;</span>);
<a name="l00548"></a>00548     puts(<span class="stringliteral">&quot; --username, -u UID    Set username of the credential to UID&quot;</span>);
<a name="l00549"></a>00549     puts(<span class="stringliteral">&quot; --password, -p PASSWD Set password of the credential to PASSWD&quot;</span>);
<a name="l00550"></a>00550     puts(<span class="stringliteral">&quot; --fingerprint, -F     Use fingerprint for outgoing requests&quot;</span>);
<a name="l00551"></a>00551     puts(<span class="stringliteral">&quot; --stun-srv, -S  NAME  Use this STUN srv instead of TURN for Binding discovery&quot;</span>);
<a name="l00552"></a>00552     puts(<span class="stringliteral">&quot; --nameserver, -N IP   Activate DNS SRV, use this DNS server&quot;</span>);
<a name="l00553"></a>00553     puts(<span class="stringliteral">&quot; --help, -h&quot;</span>);
<a name="l00554"></a>00554 }
<a name="l00555"></a>00555 
<a name="l00556"></a>00556 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l00557"></a>00557 {
<a name="l00558"></a>00558     <span class="keyword">struct </span>pj_getopt_option long_options[] = {
<a name="l00559"></a>00559         { <span class="stringliteral">&quot;realm&quot;</span>,      1, 0, <span class="charliteral">&#39;r&#39;</span>},
<a name="l00560"></a>00560         { <span class="stringliteral">&quot;username&quot;</span>,   1, 0, <span class="charliteral">&#39;u&#39;</span>},
<a name="l00561"></a>00561         { <span class="stringliteral">&quot;password&quot;</span>,   1, 0, <span class="charliteral">&#39;p&#39;</span>},
<a name="l00562"></a>00562         { <span class="stringliteral">&quot;fingerprint&quot;</span>,0, 0, <span class="charliteral">&#39;F&#39;</span>},
<a name="l00563"></a>00563         { <span class="stringliteral">&quot;tcp&quot;</span>,        0, 0, <span class="charliteral">&#39;T&#39;</span>},
<a name="l00564"></a>00564         { <span class="stringliteral">&quot;help&quot;</span>,       0, 0, <span class="charliteral">&#39;h&#39;</span>},
<a name="l00565"></a>00565         { <span class="stringliteral">&quot;stun-srv&quot;</span>,   1, 0, <span class="charliteral">&#39;S&#39;</span>},
<a name="l00566"></a>00566         { <span class="stringliteral">&quot;nameserver&quot;</span>, 1, 0, <span class="charliteral">&#39;N&#39;</span>}
<a name="l00567"></a>00567     };
<a name="l00568"></a>00568     <span class="keywordtype">int</span> c, opt_id;
<a name="l00569"></a>00569     <span class="keywordtype">char</span> *pos;
<a name="l00570"></a>00570     pj_status_t status;
<a name="l00571"></a>00571 
<a name="l00572"></a>00572     <span class="keywordflow">while</span>((c=pj_getopt_long(argc,argv, <span class="stringliteral">&quot;r:u:p:S:N:hFT&quot;</span>, long_options, &amp;opt_id))!=-1) {
<a name="l00573"></a>00573         <span class="keywordflow">switch</span> (c) {
<a name="l00574"></a>00574         <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:
<a name="l00575"></a>00575             o.realm = pj_optarg;
<a name="l00576"></a>00576             <span class="keywordflow">break</span>;
<a name="l00577"></a>00577         <span class="keywordflow">case</span> <span class="charliteral">&#39;u&#39;</span>:
<a name="l00578"></a>00578             o.user_name = pj_optarg;
<a name="l00579"></a>00579             <span class="keywordflow">break</span>;
<a name="l00580"></a>00580         <span class="keywordflow">case</span> <span class="charliteral">&#39;p&#39;</span>:
<a name="l00581"></a>00581             o.password = pj_optarg;
<a name="l00582"></a>00582             <span class="keywordflow">break</span>;
<a name="l00583"></a>00583         <span class="keywordflow">case</span> <span class="charliteral">&#39;h&#39;</span>:
<a name="l00584"></a>00584             usage();
<a name="l00585"></a>00585             <span class="keywordflow">return</span> 0;
<a name="l00586"></a>00586         <span class="keywordflow">case</span> <span class="charliteral">&#39;F&#39;</span>:
<a name="l00587"></a>00587             o.use_fingerprint = PJ_TRUE;
<a name="l00588"></a>00588             <span class="keywordflow">break</span>;
<a name="l00589"></a>00589         <span class="keywordflow">case</span> <span class="charliteral">&#39;T&#39;</span>:
<a name="l00590"></a>00590             o.use_tcp = PJ_TRUE;
<a name="l00591"></a>00591             <span class="keywordflow">break</span>;
<a name="l00592"></a>00592         <span class="keywordflow">case</span> <span class="charliteral">&#39;S&#39;</span>:
<a name="l00593"></a>00593             o.stun_server = pj_optarg;
<a name="l00594"></a>00594             <span class="keywordflow">break</span>;
<a name="l00595"></a>00595         <span class="keywordflow">case</span> <span class="charliteral">&#39;N&#39;</span>:
<a name="l00596"></a>00596             o.nameserver = pj_optarg;
<a name="l00597"></a>00597             <span class="keywordflow">break</span>;
<a name="l00598"></a>00598         <span class="keywordflow">default</span>:
<a name="l00599"></a>00599             printf(<span class="stringliteral">&quot;Argument \&quot;%s\&quot; is not valid. Use -h to see help&quot;</span>,
<a name="l00600"></a>00600                    argv[pj_optind]);
<a name="l00601"></a>00601             <span class="keywordflow">return</span> 1;
<a name="l00602"></a>00602         }
<a name="l00603"></a>00603     }
<a name="l00604"></a>00604 
<a name="l00605"></a>00605     <span class="keywordflow">if</span> (pj_optind == argc) {
<a name="l00606"></a>00606         puts(<span class="stringliteral">&quot;Error: TARGET is needed&quot;</span>);
<a name="l00607"></a>00607         usage();
<a name="l00608"></a>00608         <span class="keywordflow">return</span> 1;
<a name="l00609"></a>00609     }
<a name="l00610"></a>00610 
<a name="l00611"></a>00611     <span class="keywordflow">if</span> ((pos=pj_ansi_strchr(argv[pj_optind], <span class="charliteral">&#39;:&#39;</span>)) != NULL) {
<a name="l00612"></a>00612         o.srv_addr = argv[pj_optind];
<a name="l00613"></a>00613         *pos = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00614"></a>00614         o.srv_port = pos+1;
<a name="l00615"></a>00615     } <span class="keywordflow">else</span> {
<a name="l00616"></a>00616         o.srv_addr = argv[pj_optind];
<a name="l00617"></a>00617     }
<a name="l00618"></a>00618 
<a name="l00619"></a>00619     <span class="keywordflow">if</span> ((status=init()) != 0)
<a name="l00620"></a>00620         <span class="keywordflow">goto</span> on_return;
<a name="l00621"></a>00621     
<a name="l00622"></a>00622     <span class="comment">//if ((status=create_relay()) != 0)</span>
<a name="l00623"></a>00623     <span class="comment">//  goto on_return;</span>
<a name="l00624"></a>00624     
<a name="l00625"></a>00625     console_main();
<a name="l00626"></a>00626 
<a name="l00627"></a>00627 on_return:
<a name="l00628"></a>00628     client_shutdown();
<a name="l00629"></a>00629     <span class="keywordflow">return</span> status ? 1 : 0;
<a name="l00630"></a>00630 }
<a name="l00631"></a>00631 
</pre></div><p>. </p>
</div></div><!-- contents -->
	</TD></TD></TABLE>
<p>&nbsp;</p>
<hr><center>
PJNATH - Open Source NAT traversal helper library supporting STUN, TURN, and ICE<br>
Copyright (C) 2006-2009 Teluu Inc.
</center>


<!--#include virtual="/footer.html" -->

</BODY>
</HTML>
